{"ast":null,"code":"/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar util = require('util');\nvar utils = require('./utils');\nvar EventEmitter = require('events').EventEmitter;\nvar WebSocketFrame = require('./WebSocketFrame');\nvar BufferList = require('../vendor/FastBufferList');\nvar isValidUTF8 = require('utf-8-validate');\nvar bufferAllocUnsafe = utils.bufferAllocUnsafe;\nvar bufferFromString = utils.bufferFromString;\n\n// Connected, fully-open, ready to send and receive frames\nconst STATE_OPEN = 'open';\n// Received a close frame from the remote peer\nconst STATE_PEER_REQUESTED_CLOSE = 'peer_requested_close';\n// Sent close frame to remote peer.  No further data can be sent.\nconst STATE_ENDING = 'ending';\n// Connection is fully closed.  No further data can be sent or received.\nconst STATE_CLOSED = 'closed';\nvar setImmediateImpl = 'setImmediate' in global ? global.setImmediate.bind(global) : process.nextTick.bind(process);\nvar idCounter = 0;\nfunction WebSocketConnection(socket, extensions, protocol, maskOutgoingPackets, config) {\n  this._debug = utils.BufferingLogger('websocket:connection', ++idCounter);\n  this._debug('constructor');\n  if (this._debug.enabled) {\n    instrumentSocketForDebugging(this, socket);\n  }\n\n  // Superclass Constructor\n  EventEmitter.call(this);\n  this._pingListenerCount = 0;\n  this.on('newListener', function (ev) {\n    if (ev === 'ping') {\n      this._pingListenerCount++;\n    }\n  }).on('removeListener', function (ev) {\n    if (ev === 'ping') {\n      this._pingListenerCount--;\n    }\n  });\n  this.config = config;\n  this.socket = socket;\n  this.protocol = protocol;\n  this.extensions = extensions;\n  this.remoteAddress = socket.remoteAddress;\n  this.closeReasonCode = -1;\n  this.closeDescription = null;\n  this.closeEventEmitted = false;\n\n  // We have to mask outgoing packets if we're acting as a WebSocket client.\n  this.maskOutgoingPackets = maskOutgoingPackets;\n\n  // We re-use the same buffers for the mask and frame header for all frames\n  // received on each connection to avoid a small memory allocation for each\n  // frame.\n  this.maskBytes = bufferAllocUnsafe(4);\n  this.frameHeader = bufferAllocUnsafe(10);\n\n  // the BufferList will handle the data streaming in\n  this.bufferList = new BufferList();\n\n  // Prepare for receiving first frame\n  this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n  this.fragmentationSize = 0; // data received so far...\n  this.frameQueue = [];\n\n  // Various bits of connection state\n  this.connected = true;\n  this.state = STATE_OPEN;\n  this.waitingForCloseResponse = false;\n  // Received TCP FIN, socket's readable stream is finished.\n  this.receivedEnd = false;\n  this.closeTimeout = this.config.closeTimeout;\n  this.assembleFragments = this.config.assembleFragments;\n  this.maxReceivedMessageSize = this.config.maxReceivedMessageSize;\n  this.outputBufferFull = false;\n  this.inputPaused = false;\n  this.receivedDataHandler = this.processReceivedData.bind(this);\n  this._closeTimerHandler = this.handleCloseTimer.bind(this);\n\n  // Disable nagle algorithm?\n  this.socket.setNoDelay(this.config.disableNagleAlgorithm);\n\n  // Make sure there is no socket inactivity timeout\n  this.socket.setTimeout(0);\n  if (this.config.keepalive && !this.config.useNativeKeepalive) {\n    if (typeof this.config.keepaliveInterval !== 'number') {\n      throw new Error('keepaliveInterval must be specified and numeric ' + 'if keepalive is true.');\n    }\n    this._keepaliveTimerHandler = this.handleKeepaliveTimer.bind(this);\n    this.setKeepaliveTimer();\n    if (this.config.dropConnectionOnKeepaliveTimeout) {\n      if (typeof this.config.keepaliveGracePeriod !== 'number') {\n        throw new Error('keepaliveGracePeriod  must be specified and ' + 'numeric if dropConnectionOnKeepaliveTimeout ' + 'is true.');\n      }\n      this._gracePeriodTimerHandler = this.handleGracePeriodTimer.bind(this);\n    }\n  } else if (this.config.keepalive && this.config.useNativeKeepalive) {\n    if (!('setKeepAlive' in this.socket)) {\n      throw new Error('Unable to use native keepalive: unsupported by ' + 'this version of Node.');\n    }\n    this.socket.setKeepAlive(true, this.config.keepaliveInterval);\n  }\n\n  // The HTTP Client seems to subscribe to socket error events\n  // and re-dispatch them in such a way that doesn't make sense\n  // for users of our client, so we want to make sure nobody\n  // else is listening for error events on the socket besides us.\n  this.socket.removeAllListeners('error');\n}\nWebSocketConnection.CLOSE_REASON_NORMAL = 1000;\nWebSocketConnection.CLOSE_REASON_GOING_AWAY = 1001;\nWebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR = 1002;\nWebSocketConnection.CLOSE_REASON_UNPROCESSABLE_INPUT = 1003;\nWebSocketConnection.CLOSE_REASON_RESERVED = 1004; // Reserved value.  Undefined meaning.\nWebSocketConnection.CLOSE_REASON_NOT_PROVIDED = 1005; // Not to be used on the wire\nWebSocketConnection.CLOSE_REASON_ABNORMAL = 1006; // Not to be used on the wire\nWebSocketConnection.CLOSE_REASON_INVALID_DATA = 1007;\nWebSocketConnection.CLOSE_REASON_POLICY_VIOLATION = 1008;\nWebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG = 1009;\nWebSocketConnection.CLOSE_REASON_EXTENSION_REQUIRED = 1010;\nWebSocketConnection.CLOSE_REASON_INTERNAL_SERVER_ERROR = 1011;\nWebSocketConnection.CLOSE_REASON_TLS_HANDSHAKE_FAILED = 1015; // Not to be used on the wire\n\nWebSocketConnection.CLOSE_DESCRIPTIONS = {\n  1000: 'Normal connection closure',\n  1001: 'Remote peer is going away',\n  1002: 'Protocol error',\n  1003: 'Unprocessable input',\n  1004: 'Reserved',\n  1005: 'Reason not provided',\n  1006: 'Abnormal closure, no further detail available',\n  1007: 'Invalid data received',\n  1008: 'Policy violation',\n  1009: 'Message too big',\n  1010: 'Extension requested by client is required',\n  1011: 'Internal Server Error',\n  1015: 'TLS Handshake Failed'\n};\nfunction validateCloseReason(code) {\n  if (code < 1000) {\n    // Status codes in the range 0-999 are not used\n    return false;\n  }\n  if (code >= 1000 && code <= 2999) {\n    // Codes from 1000 - 2999 are reserved for use by the protocol.  Only\n    // a few codes are defined, all others are currently illegal.\n    return [1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015].indexOf(code) !== -1;\n  }\n  if (code >= 3000 && code <= 3999) {\n    // Reserved for use by libraries, frameworks, and applications.\n    // Should be registered with IANA.  Interpretation of these codes is\n    // undefined by the WebSocket protocol.\n    return true;\n  }\n  if (code >= 4000 && code <= 4999) {\n    // Reserved for private use.  Interpretation of these codes is\n    // undefined by the WebSocket protocol.\n    return true;\n  }\n  if (code >= 5000) {\n    return false;\n  }\n}\nutil.inherits(WebSocketConnection, EventEmitter);\nWebSocketConnection.prototype._addSocketEventListeners = function () {\n  this.socket.on('error', this.handleSocketError.bind(this));\n  this.socket.on('end', this.handleSocketEnd.bind(this));\n  this.socket.on('close', this.handleSocketClose.bind(this));\n  this.socket.on('drain', this.handleSocketDrain.bind(this));\n  this.socket.on('pause', this.handleSocketPause.bind(this));\n  this.socket.on('resume', this.handleSocketResume.bind(this));\n  this.socket.on('data', this.handleSocketData.bind(this));\n};\n\n// set or reset the keepalive timer when data is received.\nWebSocketConnection.prototype.setKeepaliveTimer = function () {\n  this._debug('setKeepaliveTimer');\n  if (!this.config.keepalive || this.config.useNativeKeepalive) {\n    return;\n  }\n  this.clearKeepaliveTimer();\n  this.clearGracePeriodTimer();\n  this._keepaliveTimeoutID = setTimeout(this._keepaliveTimerHandler, this.config.keepaliveInterval);\n};\nWebSocketConnection.prototype.clearKeepaliveTimer = function () {\n  if (this._keepaliveTimeoutID) {\n    clearTimeout(this._keepaliveTimeoutID);\n  }\n};\n\n// No data has been received within config.keepaliveTimeout ms.\nWebSocketConnection.prototype.handleKeepaliveTimer = function () {\n  this._debug('handleKeepaliveTimer');\n  this._keepaliveTimeoutID = null;\n  this.ping();\n\n  // If we are configured to drop connections if the client doesn't respond\n  // then set the grace period timer.\n  if (this.config.dropConnectionOnKeepaliveTimeout) {\n    this.setGracePeriodTimer();\n  } else {\n    // Otherwise reset the keepalive timer to send the next ping.\n    this.setKeepaliveTimer();\n  }\n};\nWebSocketConnection.prototype.setGracePeriodTimer = function () {\n  this._debug('setGracePeriodTimer');\n  this.clearGracePeriodTimer();\n  this._gracePeriodTimeoutID = setTimeout(this._gracePeriodTimerHandler, this.config.keepaliveGracePeriod);\n};\nWebSocketConnection.prototype.clearGracePeriodTimer = function () {\n  if (this._gracePeriodTimeoutID) {\n    clearTimeout(this._gracePeriodTimeoutID);\n  }\n};\nWebSocketConnection.prototype.handleGracePeriodTimer = function () {\n  this._debug('handleGracePeriodTimer');\n  // If this is called, the client has not responded and is assumed dead.\n  this._gracePeriodTimeoutID = null;\n  this.drop(WebSocketConnection.CLOSE_REASON_ABNORMAL, 'Peer not responding.', true);\n};\nWebSocketConnection.prototype.handleSocketData = function (data) {\n  this._debug('handleSocketData');\n  // Reset the keepalive timer when receiving data of any kind.\n  this.setKeepaliveTimer();\n\n  // Add received data to our bufferList, which efficiently holds received\n  // data chunks in a linked list of Buffer objects.\n  this.bufferList.write(data);\n  this.processReceivedData();\n};\nWebSocketConnection.prototype.processReceivedData = function () {\n  this._debug('processReceivedData');\n  // If we're not connected, we should ignore any data remaining on the buffer.\n  if (!this.connected) {\n    return;\n  }\n\n  // Receiving/parsing is expected to be halted when paused.\n  if (this.inputPaused) {\n    return;\n  }\n  var frame = this.currentFrame;\n\n  // WebSocketFrame.prototype.addData returns true if all data necessary to\n  // parse the frame was available.  It returns false if we are waiting for\n  // more data to come in on the wire.\n  if (!frame.addData(this.bufferList)) {\n    this._debug('-- insufficient data for frame');\n    return;\n  }\n  var self = this;\n\n  // Handle possible parsing errors\n  if (frame.protocolError) {\n    // Something bad happened.. get rid of this client.\n    this._debug('-- protocol error');\n    process.nextTick(function () {\n      self.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, frame.dropReason);\n    });\n    return;\n  } else if (frame.frameTooLarge) {\n    this._debug('-- frame too large');\n    process.nextTick(function () {\n      self.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG, frame.dropReason);\n    });\n    return;\n  }\n\n  // For now since we don't support extensions, all RSV bits are illegal\n  if (frame.rsv1 || frame.rsv2 || frame.rsv3) {\n    this._debug('-- illegal rsv flag');\n    process.nextTick(function () {\n      self.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, 'Unsupported usage of rsv bits without negotiated extension.');\n    });\n    return;\n  }\n  if (!this.assembleFragments) {\n    this._debug('-- emitting frame');\n    process.nextTick(function () {\n      self.emit('frame', frame);\n    });\n  }\n  process.nextTick(function () {\n    self.processFrame(frame);\n  });\n  this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n\n  // If there's data remaining, schedule additional processing, but yield\n  // for now so that other connections have a chance to have their data\n  // processed.  We use setImmediate here instead of process.nextTick to\n  // explicitly indicate that we wish for other I/O to be handled first.\n  if (this.bufferList.length > 0) {\n    setImmediateImpl(this.receivedDataHandler);\n  }\n};\nWebSocketConnection.prototype.handleSocketError = function (error) {\n  this._debug('handleSocketError: %j', error);\n  if (this.state === STATE_CLOSED) {\n    // See https://github.com/theturtle32/WebSocket-Node/issues/288\n    this._debug('  --- Socket \\'error\\' after \\'close\\'');\n    return;\n  }\n  this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;\n  this.closeDescription = 'Socket Error: ' + error.syscall + ' ' + error.code;\n  this.connected = false;\n  this.state = STATE_CLOSED;\n  this.fragmentationSize = 0;\n  if (utils.eventEmitterListenerCount(this, 'error') > 0) {\n    this.emit('error', error);\n  }\n  this.socket.destroy();\n  this._debug.printOutput();\n};\nWebSocketConnection.prototype.handleSocketEnd = function () {\n  this._debug('handleSocketEnd: received socket end.  state = %s', this.state);\n  this.receivedEnd = true;\n  if (this.state === STATE_CLOSED) {\n    // When using the TLS module, sometimes the socket will emit 'end'\n    // after it emits 'close'.  I don't think that's correct behavior,\n    // but we should deal with it gracefully by ignoring it.\n    this._debug('  --- Socket \\'end\\' after \\'close\\'');\n    return;\n  }\n  if (this.state !== STATE_PEER_REQUESTED_CLOSE && this.state !== STATE_ENDING) {\n    this._debug('  --- UNEXPECTED socket end.');\n    this.socket.end();\n  }\n};\nWebSocketConnection.prototype.handleSocketClose = function (hadError) {\n  this._debug('handleSocketClose: received socket close');\n  this.socketHadError = hadError;\n  this.connected = false;\n  this.state = STATE_CLOSED;\n  // If closeReasonCode is still set to -1 at this point then we must\n  // not have received a close frame!!\n  if (this.closeReasonCode === -1) {\n    this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;\n    this.closeDescription = 'Connection dropped by remote peer.';\n  }\n  this.clearCloseTimer();\n  this.clearKeepaliveTimer();\n  this.clearGracePeriodTimer();\n  if (!this.closeEventEmitted) {\n    this.closeEventEmitted = true;\n    this._debug('-- Emitting WebSocketConnection close event');\n    this.emit('close', this.closeReasonCode, this.closeDescription);\n  }\n};\nWebSocketConnection.prototype.handleSocketDrain = function () {\n  this._debug('handleSocketDrain: socket drain event');\n  this.outputBufferFull = false;\n  this.emit('drain');\n};\nWebSocketConnection.prototype.handleSocketPause = function () {\n  this._debug('handleSocketPause: socket pause event');\n  this.inputPaused = true;\n  this.emit('pause');\n};\nWebSocketConnection.prototype.handleSocketResume = function () {\n  this._debug('handleSocketResume: socket resume event');\n  this.inputPaused = false;\n  this.emit('resume');\n  this.processReceivedData();\n};\nWebSocketConnection.prototype.pause = function () {\n  this._debug('pause: pause requested');\n  this.socket.pause();\n};\nWebSocketConnection.prototype.resume = function () {\n  this._debug('resume: resume requested');\n  this.socket.resume();\n};\nWebSocketConnection.prototype.close = function (reasonCode, description) {\n  if (this.connected) {\n    this._debug('close: Initating clean WebSocket close sequence.');\n    if ('number' !== typeof reasonCode) {\n      reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n    }\n    if (!validateCloseReason(reasonCode)) {\n      throw new Error('Close code ' + reasonCode + ' is not valid.');\n    }\n    if ('string' !== typeof description) {\n      description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];\n    }\n    this.closeReasonCode = reasonCode;\n    this.closeDescription = description;\n    this.setCloseTimer();\n    this.sendCloseFrame(this.closeReasonCode, this.closeDescription);\n    this.state = STATE_ENDING;\n    this.connected = false;\n  }\n};\nWebSocketConnection.prototype.drop = function (reasonCode, description, skipCloseFrame) {\n  this._debug('drop');\n  if (typeof reasonCode !== 'number') {\n    reasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n  }\n  if (typeof description !== 'string') {\n    // If no description is provided, try to look one up based on the\n    // specified reasonCode.\n    description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];\n  }\n  this._debug('Forcefully dropping connection. skipCloseFrame: %s, code: %d, description: %s', skipCloseFrame, reasonCode, description);\n  this.closeReasonCode = reasonCode;\n  this.closeDescription = description;\n  this.frameQueue = [];\n  this.fragmentationSize = 0;\n  if (!skipCloseFrame) {\n    this.sendCloseFrame(reasonCode, description);\n  }\n  this.connected = false;\n  this.state = STATE_CLOSED;\n  this.clearCloseTimer();\n  this.clearKeepaliveTimer();\n  this.clearGracePeriodTimer();\n  if (!this.closeEventEmitted) {\n    this.closeEventEmitted = true;\n    this._debug('Emitting WebSocketConnection close event');\n    this.emit('close', this.closeReasonCode, this.closeDescription);\n  }\n  this._debug('Drop: destroying socket');\n  this.socket.destroy();\n};\nWebSocketConnection.prototype.setCloseTimer = function () {\n  this._debug('setCloseTimer');\n  this.clearCloseTimer();\n  this._debug('Setting close timer');\n  this.waitingForCloseResponse = true;\n  this.closeTimer = setTimeout(this._closeTimerHandler, this.closeTimeout);\n};\nWebSocketConnection.prototype.clearCloseTimer = function () {\n  this._debug('clearCloseTimer');\n  if (this.closeTimer) {\n    this._debug('Clearing close timer');\n    clearTimeout(this.closeTimer);\n    this.waitingForCloseResponse = false;\n    this.closeTimer = null;\n  }\n};\nWebSocketConnection.prototype.handleCloseTimer = function () {\n  this._debug('handleCloseTimer');\n  this.closeTimer = null;\n  if (this.waitingForCloseResponse) {\n    this._debug('Close response not received from client.  Forcing socket end.');\n    this.waitingForCloseResponse = false;\n    this.state = STATE_CLOSED;\n    this.socket.end();\n  }\n};\nWebSocketConnection.prototype.processFrame = function (frame) {\n  this._debug('processFrame');\n  this._debug(' -- frame: %s', frame);\n\n  // Any non-control opcode besides 0x00 (continuation) received in the\n  // middle of a fragmented message is illegal.\n  if (this.frameQueue.length !== 0 && frame.opcode > 0x00 && frame.opcode < 0x08) {\n    this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, 'Illegal frame opcode 0x' + frame.opcode.toString(16) + ' ' + 'received in middle of fragmented message.');\n    return;\n  }\n  switch (frame.opcode) {\n    case 0x02:\n      // WebSocketFrame.BINARY_FRAME\n      this._debug('-- Binary Frame');\n      if (this.assembleFragments) {\n        if (frame.fin) {\n          // Complete single-frame message received\n          this._debug('---- Emitting \\'message\\' event');\n          this.emit('message', {\n            type: 'binary',\n            binaryData: frame.binaryPayload\n          });\n        } else {\n          // beginning of a fragmented message\n          this.frameQueue.push(frame);\n          this.fragmentationSize = frame.length;\n        }\n      }\n      break;\n    case 0x01:\n      // WebSocketFrame.TEXT_FRAME\n      this._debug('-- Text Frame');\n      if (this.assembleFragments) {\n        if (frame.fin) {\n          if (!isValidUTF8(frame.binaryPayload)) {\n            this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, 'Invalid UTF-8 Data Received');\n            return;\n          }\n          // Complete single-frame message received\n          this._debug('---- Emitting \\'message\\' event');\n          this.emit('message', {\n            type: 'utf8',\n            utf8Data: frame.binaryPayload.toString('utf8')\n          });\n        } else {\n          // beginning of a fragmented message\n          this.frameQueue.push(frame);\n          this.fragmentationSize = frame.length;\n        }\n      }\n      break;\n    case 0x00:\n      // WebSocketFrame.CONTINUATION\n      this._debug('-- Continuation Frame');\n      if (this.assembleFragments) {\n        if (this.frameQueue.length === 0) {\n          this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, 'Unexpected Continuation Frame');\n          return;\n        }\n        this.fragmentationSize += frame.length;\n        if (this.fragmentationSize > this.maxReceivedMessageSize) {\n          this.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG, 'Maximum message size exceeded.');\n          return;\n        }\n        this.frameQueue.push(frame);\n        if (frame.fin) {\n          // end of fragmented message, so we process the whole\n          // message now.  We also have to decode the utf-8 data\n          // for text frames after combining all the fragments.\n          var bytesCopied = 0;\n          var binaryPayload = bufferAllocUnsafe(this.fragmentationSize);\n          var opcode = this.frameQueue[0].opcode;\n          this.frameQueue.forEach(function (currentFrame) {\n            currentFrame.binaryPayload.copy(binaryPayload, bytesCopied);\n            bytesCopied += currentFrame.binaryPayload.length;\n          });\n          this.frameQueue = [];\n          this.fragmentationSize = 0;\n          switch (opcode) {\n            case 0x02:\n              // WebSocketOpcode.BINARY_FRAME\n              this.emit('message', {\n                type: 'binary',\n                binaryData: binaryPayload\n              });\n              break;\n            case 0x01:\n              // WebSocketOpcode.TEXT_FRAME\n              if (!isValidUTF8(binaryPayload)) {\n                this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, 'Invalid UTF-8 Data Received');\n                return;\n              }\n              this.emit('message', {\n                type: 'utf8',\n                utf8Data: binaryPayload.toString('utf8')\n              });\n              break;\n            default:\n              this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, 'Unexpected first opcode in fragmentation sequence: 0x' + opcode.toString(16));\n              return;\n          }\n        }\n      }\n      break;\n    case 0x09:\n      // WebSocketFrame.PING\n      this._debug('-- Ping Frame');\n      if (this._pingListenerCount > 0) {\n        // logic to emit the ping frame: this is only done when a listener is known to exist\n        // Expose a function allowing the user to override the default ping() behavior\n        var cancelled = false;\n        var cancel = function () {\n          cancelled = true;\n        };\n        this.emit('ping', cancel, frame.binaryPayload);\n\n        // Only send a pong if the client did not indicate that he would like to cancel\n        if (!cancelled) {\n          this.pong(frame.binaryPayload);\n        }\n      } else {\n        this.pong(frame.binaryPayload);\n      }\n      break;\n    case 0x0A:\n      // WebSocketFrame.PONG\n      this._debug('-- Pong Frame');\n      this.emit('pong', frame.binaryPayload);\n      break;\n    case 0x08:\n      // WebSocketFrame.CONNECTION_CLOSE\n      this._debug('-- Close Frame');\n      if (this.waitingForCloseResponse) {\n        // Got response to our request to close the connection.\n        // Close is complete, so we just hang up.\n        this._debug('---- Got close response from peer.  Completing closing handshake.');\n        this.clearCloseTimer();\n        this.waitingForCloseResponse = false;\n        this.state = STATE_CLOSED;\n        this.socket.end();\n        return;\n      }\n      this._debug('---- Closing handshake initiated by peer.');\n      // Got request from other party to close connection.\n      // Send back acknowledgement and then hang up.\n      this.state = STATE_PEER_REQUESTED_CLOSE;\n      var respondCloseReasonCode;\n\n      // Make sure the close reason provided is legal according to\n      // the protocol spec.  Providing no close status is legal.\n      // WebSocketFrame sets closeStatus to -1 by default, so if it\n      // is still -1, then no status was provided.\n      if (frame.invalidCloseFrameLength) {\n        this.closeReasonCode = 1005; // 1005 = No reason provided.\n        respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n      } else if (frame.closeStatus === -1 || validateCloseReason(frame.closeStatus)) {\n        this.closeReasonCode = frame.closeStatus;\n        respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n      } else {\n        this.closeReasonCode = frame.closeStatus;\n        respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n      }\n\n      // If there is a textual description in the close frame, extract it.\n      if (frame.binaryPayload.length > 1) {\n        if (!isValidUTF8(frame.binaryPayload)) {\n          this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, 'Invalid UTF-8 Data Received');\n          return;\n        }\n        this.closeDescription = frame.binaryPayload.toString('utf8');\n      } else {\n        this.closeDescription = WebSocketConnection.CLOSE_DESCRIPTIONS[this.closeReasonCode];\n      }\n      this._debug('------ Remote peer %s - code: %d - %s - close frame payload length: %d', this.remoteAddress, this.closeReasonCode, this.closeDescription, frame.length);\n      this._debug('------ responding to remote peer\\'s close request.');\n      this.sendCloseFrame(respondCloseReasonCode, null);\n      this.connected = false;\n      break;\n    default:\n      this._debug('-- Unrecognized Opcode %d', frame.opcode);\n      this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, 'Unrecognized Opcode: 0x' + frame.opcode.toString(16));\n      break;\n  }\n};\nWebSocketConnection.prototype.send = function (data, cb) {\n  this._debug('send');\n  if (Buffer.isBuffer(data)) {\n    this.sendBytes(data, cb);\n  } else if (typeof data['toString'] === 'function') {\n    this.sendUTF(data, cb);\n  } else {\n    throw new Error('Data provided must either be a Node Buffer or implement toString()');\n  }\n};\nWebSocketConnection.prototype.sendUTF = function (data, cb) {\n  data = bufferFromString(data.toString(), 'utf8');\n  this._debug('sendUTF: %d bytes', data.length);\n  var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n  frame.opcode = 0x01; // WebSocketOpcode.TEXT_FRAME\n  frame.binaryPayload = data;\n  this.fragmentAndSend(frame, cb);\n};\nWebSocketConnection.prototype.sendBytes = function (data, cb) {\n  this._debug('sendBytes');\n  if (!Buffer.isBuffer(data)) {\n    throw new Error('You must pass a Node Buffer object to WebSocketConnection.prototype.sendBytes()');\n  }\n  var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n  frame.opcode = 0x02; // WebSocketOpcode.BINARY_FRAME\n  frame.binaryPayload = data;\n  this.fragmentAndSend(frame, cb);\n};\nWebSocketConnection.prototype.ping = function (data) {\n  this._debug('ping');\n  var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n  frame.opcode = 0x09; // WebSocketOpcode.PING\n  frame.fin = true;\n  if (data) {\n    if (!Buffer.isBuffer(data)) {\n      data = bufferFromString(data.toString(), 'utf8');\n    }\n    if (data.length > 125) {\n      this._debug('WebSocket: Data for ping is longer than 125 bytes.  Truncating.');\n      data = data.slice(0, 124);\n    }\n    frame.binaryPayload = data;\n  }\n  this.sendFrame(frame);\n};\n\n// Pong frames have to echo back the contents of the data portion of the\n// ping frame exactly, byte for byte.\nWebSocketConnection.prototype.pong = function (binaryPayload) {\n  this._debug('pong');\n  var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n  frame.opcode = 0x0A; // WebSocketOpcode.PONG\n  if (Buffer.isBuffer(binaryPayload) && binaryPayload.length > 125) {\n    this._debug('WebSocket: Data for pong is longer than 125 bytes.  Truncating.');\n    binaryPayload = binaryPayload.slice(0, 124);\n  }\n  frame.binaryPayload = binaryPayload;\n  frame.fin = true;\n  this.sendFrame(frame);\n};\nWebSocketConnection.prototype.fragmentAndSend = function (frame, cb) {\n  this._debug('fragmentAndSend');\n  if (frame.opcode > 0x07) {\n    throw new Error('You cannot fragment control frames.');\n  }\n  var threshold = this.config.fragmentationThreshold;\n  var length = frame.binaryPayload.length;\n\n  // Send immediately if fragmentation is disabled or the message is not\n  // larger than the fragmentation threshold.\n  if (!this.config.fragmentOutgoingMessages || frame.binaryPayload && length <= threshold) {\n    frame.fin = true;\n    this.sendFrame(frame, cb);\n    return;\n  }\n  var numFragments = Math.ceil(length / threshold);\n  var sentFragments = 0;\n  var sentCallback = function fragmentSentCallback(err) {\n    if (err) {\n      if (typeof cb === 'function') {\n        // pass only the first error\n        cb(err);\n        cb = null;\n      }\n      return;\n    }\n    ++sentFragments;\n    if (sentFragments === numFragments && typeof cb === 'function') {\n      cb();\n    }\n  };\n  for (var i = 1; i <= numFragments; i++) {\n    var currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n\n    // continuation opcode except for first frame.\n    currentFrame.opcode = i === 1 ? frame.opcode : 0x00;\n\n    // fin set on last frame only\n    currentFrame.fin = i === numFragments;\n\n    // length is likely to be shorter on the last fragment\n    var currentLength = i === numFragments ? length - threshold * (i - 1) : threshold;\n    var sliceStart = threshold * (i - 1);\n\n    // Slice the right portion of the original payload\n    currentFrame.binaryPayload = frame.binaryPayload.slice(sliceStart, sliceStart + currentLength);\n    this.sendFrame(currentFrame, sentCallback);\n  }\n};\nWebSocketConnection.prototype.sendCloseFrame = function (reasonCode, description, cb) {\n  if (typeof reasonCode !== 'number') {\n    reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n  }\n  this._debug('sendCloseFrame state: %s, reasonCode: %d, description: %s', this.state, reasonCode, description);\n  if (this.state !== STATE_OPEN && this.state !== STATE_PEER_REQUESTED_CLOSE) {\n    return;\n  }\n  var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n  frame.fin = true;\n  frame.opcode = 0x08; // WebSocketOpcode.CONNECTION_CLOSE\n  frame.closeStatus = reasonCode;\n  if (typeof description === 'string') {\n    frame.binaryPayload = bufferFromString(description, 'utf8');\n  }\n  this.sendFrame(frame, cb);\n  this.socket.end();\n};\nWebSocketConnection.prototype.sendFrame = function (frame, cb) {\n  this._debug('sendFrame');\n  frame.mask = this.maskOutgoingPackets;\n  var flushed = this.socket.write(frame.toBuffer(), cb);\n  this.outputBufferFull = !flushed;\n  return flushed;\n};\nmodule.exports = WebSocketConnection;\nfunction instrumentSocketForDebugging(connection, socket) {\n  /* jshint loopfunc: true */\n  if (!connection._debug.enabled) {\n    return;\n  }\n  var originalSocketEmit = socket.emit;\n  socket.emit = function (event) {\n    connection._debug('||| Socket Event  \\'%s\\'', event);\n    originalSocketEmit.apply(this, arguments);\n  };\n  for (var key in socket) {\n    if ('function' !== typeof socket[key]) {\n      continue;\n    }\n    if (['emit'].indexOf(key) !== -1) {\n      continue;\n    }\n    (function (key) {\n      var original = socket[key];\n      if (key === 'on') {\n        socket[key] = function proxyMethod__EventEmitter__On() {\n          connection._debug('||| Socket method called:  %s (%s)', key, arguments[0]);\n          return original.apply(this, arguments);\n        };\n        return;\n      }\n      socket[key] = function proxyMethod() {\n        connection._debug('||| Socket method called:  %s', key);\n        return original.apply(this, arguments);\n      };\n    })(key);\n  }\n}","map":{"version":3,"names":["util","require","utils","EventEmitter","WebSocketFrame","BufferList","isValidUTF8","bufferAllocUnsafe","bufferFromString","STATE_OPEN","STATE_PEER_REQUESTED_CLOSE","STATE_ENDING","STATE_CLOSED","setImmediateImpl","global","setImmediate","bind","process","nextTick","idCounter","WebSocketConnection","socket","extensions","protocol","maskOutgoingPackets","config","_debug","BufferingLogger","enabled","instrumentSocketForDebugging","call","_pingListenerCount","on","ev","remoteAddress","closeReasonCode","closeDescription","closeEventEmitted","maskBytes","frameHeader","bufferList","currentFrame","fragmentationSize","frameQueue","connected","state","waitingForCloseResponse","receivedEnd","closeTimeout","assembleFragments","maxReceivedMessageSize","outputBufferFull","inputPaused","receivedDataHandler","processReceivedData","_closeTimerHandler","handleCloseTimer","setNoDelay","disableNagleAlgorithm","setTimeout","keepalive","useNativeKeepalive","keepaliveInterval","Error","_keepaliveTimerHandler","handleKeepaliveTimer","setKeepaliveTimer","dropConnectionOnKeepaliveTimeout","keepaliveGracePeriod","_gracePeriodTimerHandler","handleGracePeriodTimer","setKeepAlive","removeAllListeners","CLOSE_REASON_NORMAL","CLOSE_REASON_GOING_AWAY","CLOSE_REASON_PROTOCOL_ERROR","CLOSE_REASON_UNPROCESSABLE_INPUT","CLOSE_REASON_RESERVED","CLOSE_REASON_NOT_PROVIDED","CLOSE_REASON_ABNORMAL","CLOSE_REASON_INVALID_DATA","CLOSE_REASON_POLICY_VIOLATION","CLOSE_REASON_MESSAGE_TOO_BIG","CLOSE_REASON_EXTENSION_REQUIRED","CLOSE_REASON_INTERNAL_SERVER_ERROR","CLOSE_REASON_TLS_HANDSHAKE_FAILED","CLOSE_DESCRIPTIONS","validateCloseReason","code","indexOf","inherits","prototype","_addSocketEventListeners","handleSocketError","handleSocketEnd","handleSocketClose","handleSocketDrain","handleSocketPause","handleSocketResume","handleSocketData","clearKeepaliveTimer","clearGracePeriodTimer","_keepaliveTimeoutID","clearTimeout","ping","setGracePeriodTimer","_gracePeriodTimeoutID","drop","data","write","frame","addData","self","protocolError","dropReason","frameTooLarge","rsv1","rsv2","rsv3","emit","processFrame","length","error","syscall","eventEmitterListenerCount","destroy","printOutput","end","hadError","socketHadError","clearCloseTimer","pause","resume","close","reasonCode","description","setCloseTimer","sendCloseFrame","skipCloseFrame","closeTimer","opcode","toString","fin","type","binaryData","binaryPayload","push","utf8Data","bytesCopied","forEach","copy","cancelled","cancel","pong","respondCloseReasonCode","invalidCloseFrameLength","closeStatus","send","cb","Buffer","isBuffer","sendBytes","sendUTF","fragmentAndSend","slice","sendFrame","threshold","fragmentationThreshold","fragmentOutgoingMessages","numFragments","Math","ceil","sentFragments","sentCallback","fragmentSentCallback","err","i","currentLength","sliceStart","mask","flushed","toBuffer","module","exports","connection","originalSocketEmit","event","apply","arguments","key","original","proxyMethod__EventEmitter__On","proxyMethod"],"sources":["/home/ubuntu/Projects/digital_trading/frontend/my-react-app/node_modules/websocket/lib/WebSocketConnection.js"],"sourcesContent":["/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/\n\nvar util = require('util');\nvar utils = require('./utils');\nvar EventEmitter = require('events').EventEmitter;\nvar WebSocketFrame = require('./WebSocketFrame');\nvar BufferList = require('../vendor/FastBufferList');\nvar isValidUTF8 = require('utf-8-validate');\nvar bufferAllocUnsafe = utils.bufferAllocUnsafe;\nvar bufferFromString = utils.bufferFromString;\n\n// Connected, fully-open, ready to send and receive frames\nconst STATE_OPEN = 'open';\n// Received a close frame from the remote peer\nconst STATE_PEER_REQUESTED_CLOSE = 'peer_requested_close';\n// Sent close frame to remote peer.  No further data can be sent.\nconst STATE_ENDING = 'ending';\n// Connection is fully closed.  No further data can be sent or received.\nconst STATE_CLOSED = 'closed';\n\nvar setImmediateImpl = ('setImmediate' in global) ?\n                            global.setImmediate.bind(global) :\n                            process.nextTick.bind(process);\n\nvar idCounter = 0;\n\nfunction WebSocketConnection(socket, extensions, protocol, maskOutgoingPackets, config) {\n    this._debug = utils.BufferingLogger('websocket:connection', ++idCounter);\n    this._debug('constructor');\n    \n    if (this._debug.enabled) {\n        instrumentSocketForDebugging(this, socket);\n    }\n    \n    // Superclass Constructor\n    EventEmitter.call(this);\n\n    this._pingListenerCount = 0;\n    this.on('newListener', function(ev) {\n        if (ev === 'ping'){\n            this._pingListenerCount++;\n        }\n      }).on('removeListener', function(ev) {\n        if (ev === 'ping') {\n            this._pingListenerCount--;\n        }\n    });\n\n    this.config = config;\n    this.socket = socket;\n    this.protocol = protocol;\n    this.extensions = extensions;\n    this.remoteAddress = socket.remoteAddress;\n    this.closeReasonCode = -1;\n    this.closeDescription = null;\n    this.closeEventEmitted = false;\n\n    // We have to mask outgoing packets if we're acting as a WebSocket client.\n    this.maskOutgoingPackets = maskOutgoingPackets;\n\n    // We re-use the same buffers for the mask and frame header for all frames\n    // received on each connection to avoid a small memory allocation for each\n    // frame.\n    this.maskBytes = bufferAllocUnsafe(4);\n    this.frameHeader = bufferAllocUnsafe(10);\n\n    // the BufferList will handle the data streaming in\n    this.bufferList = new BufferList();\n\n    // Prepare for receiving first frame\n    this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    this.fragmentationSize = 0; // data received so far...\n    this.frameQueue = [];\n    \n    // Various bits of connection state\n    this.connected = true;\n    this.state = STATE_OPEN;\n    this.waitingForCloseResponse = false;\n    // Received TCP FIN, socket's readable stream is finished.\n    this.receivedEnd = false;\n\n    this.closeTimeout = this.config.closeTimeout;\n    this.assembleFragments = this.config.assembleFragments;\n    this.maxReceivedMessageSize = this.config.maxReceivedMessageSize;\n\n    this.outputBufferFull = false;\n    this.inputPaused = false;\n    this.receivedDataHandler = this.processReceivedData.bind(this);\n    this._closeTimerHandler = this.handleCloseTimer.bind(this);\n\n    // Disable nagle algorithm?\n    this.socket.setNoDelay(this.config.disableNagleAlgorithm);\n\n    // Make sure there is no socket inactivity timeout\n    this.socket.setTimeout(0);\n\n    if (this.config.keepalive && !this.config.useNativeKeepalive) {\n        if (typeof(this.config.keepaliveInterval) !== 'number') {\n            throw new Error('keepaliveInterval must be specified and numeric ' +\n                            'if keepalive is true.');\n        }\n        this._keepaliveTimerHandler = this.handleKeepaliveTimer.bind(this);\n        this.setKeepaliveTimer();\n\n        if (this.config.dropConnectionOnKeepaliveTimeout) {\n            if (typeof(this.config.keepaliveGracePeriod) !== 'number') {\n                throw new Error('keepaliveGracePeriod  must be specified and ' +\n                                'numeric if dropConnectionOnKeepaliveTimeout ' +\n                                'is true.');\n            }\n            this._gracePeriodTimerHandler = this.handleGracePeriodTimer.bind(this);\n        }\n    }\n    else if (this.config.keepalive && this.config.useNativeKeepalive) {\n        if (!('setKeepAlive' in this.socket)) {\n            throw new Error('Unable to use native keepalive: unsupported by ' +\n                            'this version of Node.');\n        }\n        this.socket.setKeepAlive(true, this.config.keepaliveInterval);\n    }\n    \n    // The HTTP Client seems to subscribe to socket error events\n    // and re-dispatch them in such a way that doesn't make sense\n    // for users of our client, so we want to make sure nobody\n    // else is listening for error events on the socket besides us.\n    this.socket.removeAllListeners('error');\n}\n\nWebSocketConnection.CLOSE_REASON_NORMAL = 1000;\nWebSocketConnection.CLOSE_REASON_GOING_AWAY = 1001;\nWebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR = 1002;\nWebSocketConnection.CLOSE_REASON_UNPROCESSABLE_INPUT = 1003;\nWebSocketConnection.CLOSE_REASON_RESERVED = 1004; // Reserved value.  Undefined meaning.\nWebSocketConnection.CLOSE_REASON_NOT_PROVIDED = 1005; // Not to be used on the wire\nWebSocketConnection.CLOSE_REASON_ABNORMAL = 1006; // Not to be used on the wire\nWebSocketConnection.CLOSE_REASON_INVALID_DATA = 1007;\nWebSocketConnection.CLOSE_REASON_POLICY_VIOLATION = 1008;\nWebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG = 1009;\nWebSocketConnection.CLOSE_REASON_EXTENSION_REQUIRED = 1010;\nWebSocketConnection.CLOSE_REASON_INTERNAL_SERVER_ERROR = 1011;\nWebSocketConnection.CLOSE_REASON_TLS_HANDSHAKE_FAILED = 1015; // Not to be used on the wire\n\nWebSocketConnection.CLOSE_DESCRIPTIONS = {\n    1000: 'Normal connection closure',\n    1001: 'Remote peer is going away',\n    1002: 'Protocol error',\n    1003: 'Unprocessable input',\n    1004: 'Reserved',\n    1005: 'Reason not provided',\n    1006: 'Abnormal closure, no further detail available',\n    1007: 'Invalid data received',\n    1008: 'Policy violation',\n    1009: 'Message too big',\n    1010: 'Extension requested by client is required',\n    1011: 'Internal Server Error',\n    1015: 'TLS Handshake Failed'\n};\n\nfunction validateCloseReason(code) {\n    if (code < 1000) {\n        // Status codes in the range 0-999 are not used\n        return false;\n    }\n    if (code >= 1000 && code <= 2999) {\n        // Codes from 1000 - 2999 are reserved for use by the protocol.  Only\n        // a few codes are defined, all others are currently illegal.\n        return [1000, 1001, 1002, 1003, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015].indexOf(code) !== -1;\n    }\n    if (code >= 3000 && code <= 3999) {\n        // Reserved for use by libraries, frameworks, and applications.\n        // Should be registered with IANA.  Interpretation of these codes is\n        // undefined by the WebSocket protocol.\n        return true;\n    }\n    if (code >= 4000 && code <= 4999) {\n        // Reserved for private use.  Interpretation of these codes is\n        // undefined by the WebSocket protocol.\n        return true;\n    }\n    if (code >= 5000) {\n        return false;\n    }\n}\n\nutil.inherits(WebSocketConnection, EventEmitter);\n\nWebSocketConnection.prototype._addSocketEventListeners = function() {\n    this.socket.on('error', this.handleSocketError.bind(this));\n    this.socket.on('end', this.handleSocketEnd.bind(this));\n    this.socket.on('close', this.handleSocketClose.bind(this));\n    this.socket.on('drain', this.handleSocketDrain.bind(this));\n    this.socket.on('pause', this.handleSocketPause.bind(this));\n    this.socket.on('resume', this.handleSocketResume.bind(this));\n    this.socket.on('data', this.handleSocketData.bind(this));\n};\n\n// set or reset the keepalive timer when data is received.\nWebSocketConnection.prototype.setKeepaliveTimer = function() {\n    this._debug('setKeepaliveTimer');\n    if (!this.config.keepalive  || this.config.useNativeKeepalive) { return; }\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n    this._keepaliveTimeoutID = setTimeout(this._keepaliveTimerHandler, this.config.keepaliveInterval);\n};\n\nWebSocketConnection.prototype.clearKeepaliveTimer = function() {\n    if (this._keepaliveTimeoutID) {\n        clearTimeout(this._keepaliveTimeoutID);\n    }\n};\n\n// No data has been received within config.keepaliveTimeout ms.\nWebSocketConnection.prototype.handleKeepaliveTimer = function() {\n    this._debug('handleKeepaliveTimer');\n    this._keepaliveTimeoutID = null;\n    this.ping();\n\n    // If we are configured to drop connections if the client doesn't respond\n    // then set the grace period timer.\n    if (this.config.dropConnectionOnKeepaliveTimeout) {\n        this.setGracePeriodTimer();\n    }\n    else {\n        // Otherwise reset the keepalive timer to send the next ping.\n        this.setKeepaliveTimer();\n    }\n};\n\nWebSocketConnection.prototype.setGracePeriodTimer = function() {\n    this._debug('setGracePeriodTimer');\n    this.clearGracePeriodTimer();\n    this._gracePeriodTimeoutID = setTimeout(this._gracePeriodTimerHandler, this.config.keepaliveGracePeriod);\n};\n\nWebSocketConnection.prototype.clearGracePeriodTimer = function() {\n    if (this._gracePeriodTimeoutID) {\n        clearTimeout(this._gracePeriodTimeoutID);\n    }\n};\n\nWebSocketConnection.prototype.handleGracePeriodTimer = function() {\n    this._debug('handleGracePeriodTimer');\n    // If this is called, the client has not responded and is assumed dead.\n    this._gracePeriodTimeoutID = null;\n    this.drop(WebSocketConnection.CLOSE_REASON_ABNORMAL, 'Peer not responding.', true);\n};\n\nWebSocketConnection.prototype.handleSocketData = function(data) {\n    this._debug('handleSocketData');\n    // Reset the keepalive timer when receiving data of any kind.\n    this.setKeepaliveTimer();\n\n    // Add received data to our bufferList, which efficiently holds received\n    // data chunks in a linked list of Buffer objects.\n    this.bufferList.write(data);\n\n    this.processReceivedData();\n};\n\nWebSocketConnection.prototype.processReceivedData = function() {\n    this._debug('processReceivedData');\n    // If we're not connected, we should ignore any data remaining on the buffer.\n    if (!this.connected) { return; }\n\n    // Receiving/parsing is expected to be halted when paused.\n    if (this.inputPaused) { return; }\n\n    var frame = this.currentFrame;\n\n    // WebSocketFrame.prototype.addData returns true if all data necessary to\n    // parse the frame was available.  It returns false if we are waiting for\n    // more data to come in on the wire.\n    if (!frame.addData(this.bufferList)) { this._debug('-- insufficient data for frame'); return; }\n\n    var self = this;\n\n    // Handle possible parsing errors\n    if (frame.protocolError) {\n        // Something bad happened.. get rid of this client.\n        this._debug('-- protocol error');\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, frame.dropReason);\n        });\n        return;\n    }\n    else if (frame.frameTooLarge) {\n        this._debug('-- frame too large');\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG, frame.dropReason);\n        });\n        return;\n    }\n\n    // For now since we don't support extensions, all RSV bits are illegal\n    if (frame.rsv1 || frame.rsv2 || frame.rsv3) {\n        this._debug('-- illegal rsv flag');\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR,\n              'Unsupported usage of rsv bits without negotiated extension.');\n        });\n        return;\n    }\n\n    if (!this.assembleFragments) {\n        this._debug('-- emitting frame');\n        process.nextTick(function() { self.emit('frame', frame); });\n    }\n\n    process.nextTick(function() { self.processFrame(frame); });\n    \n    this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n\n    // If there's data remaining, schedule additional processing, but yield\n    // for now so that other connections have a chance to have their data\n    // processed.  We use setImmediate here instead of process.nextTick to\n    // explicitly indicate that we wish for other I/O to be handled first.\n    if (this.bufferList.length > 0) {\n        setImmediateImpl(this.receivedDataHandler);\n    }\n};\n\nWebSocketConnection.prototype.handleSocketError = function(error) {\n    this._debug('handleSocketError: %j', error);\n    if (this.state === STATE_CLOSED) {\n\t\t// See https://github.com/theturtle32/WebSocket-Node/issues/288\n        this._debug('  --- Socket \\'error\\' after \\'close\\'');\n        return;\n    }\n    this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;\n    this.closeDescription = 'Socket Error: ' + error.syscall + ' ' + error.code;\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    this.fragmentationSize = 0;\n    if (utils.eventEmitterListenerCount(this, 'error') > 0) {\n        this.emit('error', error);\n    }\n    this.socket.destroy();\n    this._debug.printOutput();\n};\n\nWebSocketConnection.prototype.handleSocketEnd = function() {\n    this._debug('handleSocketEnd: received socket end.  state = %s', this.state);\n    this.receivedEnd = true;\n    if (this.state === STATE_CLOSED) {\n        // When using the TLS module, sometimes the socket will emit 'end'\n        // after it emits 'close'.  I don't think that's correct behavior,\n        // but we should deal with it gracefully by ignoring it.\n        this._debug('  --- Socket \\'end\\' after \\'close\\'');\n        return;\n    }\n    if (this.state !== STATE_PEER_REQUESTED_CLOSE &&\n        this.state !== STATE_ENDING) {\n      this._debug('  --- UNEXPECTED socket end.');\n      this.socket.end();\n    }\n};\n\nWebSocketConnection.prototype.handleSocketClose = function(hadError) {\n    this._debug('handleSocketClose: received socket close');\n    this.socketHadError = hadError;\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    // If closeReasonCode is still set to -1 at this point then we must\n    // not have received a close frame!!\n    if (this.closeReasonCode === -1) {\n        this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;\n        this.closeDescription = 'Connection dropped by remote peer.';\n    }\n    this.clearCloseTimer();\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n    if (!this.closeEventEmitted) {\n        this.closeEventEmitted = true;\n        this._debug('-- Emitting WebSocketConnection close event');\n        this.emit('close', this.closeReasonCode, this.closeDescription);\n    }\n};\n\nWebSocketConnection.prototype.handleSocketDrain = function() {\n    this._debug('handleSocketDrain: socket drain event');\n    this.outputBufferFull = false;\n    this.emit('drain');\n};\n\nWebSocketConnection.prototype.handleSocketPause = function() {\n    this._debug('handleSocketPause: socket pause event');\n    this.inputPaused = true;\n    this.emit('pause');\n};\n\nWebSocketConnection.prototype.handleSocketResume = function() {\n    this._debug('handleSocketResume: socket resume event');\n    this.inputPaused = false;\n    this.emit('resume');\n    this.processReceivedData();\n};\n\nWebSocketConnection.prototype.pause = function() {\n    this._debug('pause: pause requested');\n    this.socket.pause();\n};\n\nWebSocketConnection.prototype.resume = function() {\n    this._debug('resume: resume requested');\n    this.socket.resume();\n};\n\nWebSocketConnection.prototype.close = function(reasonCode, description) {\n    if (this.connected) {\n        this._debug('close: Initating clean WebSocket close sequence.');\n        if ('number' !== typeof reasonCode) {\n            reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n        }\n        if (!validateCloseReason(reasonCode)) {\n            throw new Error('Close code ' + reasonCode + ' is not valid.');\n        }\n        if ('string' !== typeof description) {\n            description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];\n        }\n        this.closeReasonCode = reasonCode;\n        this.closeDescription = description;\n        this.setCloseTimer();\n        this.sendCloseFrame(this.closeReasonCode, this.closeDescription);\n        this.state = STATE_ENDING;\n        this.connected = false;\n    }\n};\n\nWebSocketConnection.prototype.drop = function(reasonCode, description, skipCloseFrame) {\n    this._debug('drop');\n    if (typeof(reasonCode) !== 'number') {\n        reasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n    }\n\n    if (typeof(description) !== 'string') {\n        // If no description is provided, try to look one up based on the\n        // specified reasonCode.\n        description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];\n    }\n\n    this._debug('Forcefully dropping connection. skipCloseFrame: %s, code: %d, description: %s',\n        skipCloseFrame, reasonCode, description\n    );\n\n    this.closeReasonCode = reasonCode;\n    this.closeDescription = description;\n    this.frameQueue = [];\n    this.fragmentationSize = 0;\n    if (!skipCloseFrame) {\n        this.sendCloseFrame(reasonCode, description);\n    }\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    this.clearCloseTimer();\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n\n    if (!this.closeEventEmitted) {\n        this.closeEventEmitted = true;\n        this._debug('Emitting WebSocketConnection close event');\n        this.emit('close', this.closeReasonCode, this.closeDescription);\n    }\n    \n    this._debug('Drop: destroying socket');\n    this.socket.destroy();\n};\n\nWebSocketConnection.prototype.setCloseTimer = function() {\n    this._debug('setCloseTimer');\n    this.clearCloseTimer();\n    this._debug('Setting close timer');\n    this.waitingForCloseResponse = true;\n    this.closeTimer = setTimeout(this._closeTimerHandler, this.closeTimeout);\n};\n\nWebSocketConnection.prototype.clearCloseTimer = function() {\n    this._debug('clearCloseTimer');\n    if (this.closeTimer) {\n        this._debug('Clearing close timer');\n        clearTimeout(this.closeTimer);\n        this.waitingForCloseResponse = false;\n        this.closeTimer = null;\n    }\n};\n\nWebSocketConnection.prototype.handleCloseTimer = function() {\n    this._debug('handleCloseTimer');\n    this.closeTimer = null;\n    if (this.waitingForCloseResponse) {\n        this._debug('Close response not received from client.  Forcing socket end.');\n        this.waitingForCloseResponse = false;\n        this.state = STATE_CLOSED;\n        this.socket.end();\n    }\n};\n\nWebSocketConnection.prototype.processFrame = function(frame) {\n    this._debug('processFrame');\n    this._debug(' -- frame: %s', frame);\n    \n    // Any non-control opcode besides 0x00 (continuation) received in the\n    // middle of a fragmented message is illegal.\n    if (this.frameQueue.length !== 0 && (frame.opcode > 0x00 && frame.opcode < 0x08)) {\n        this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR,\n          'Illegal frame opcode 0x' + frame.opcode.toString(16) + ' ' +\n          'received in middle of fragmented message.');\n        return;\n    }\n\n    switch(frame.opcode) {\n        case 0x02: // WebSocketFrame.BINARY_FRAME\n            this._debug('-- Binary Frame');\n            if (this.assembleFragments) {\n                if (frame.fin) {\n                    // Complete single-frame message received\n                    this._debug('---- Emitting \\'message\\' event');\n                    this.emit('message', {\n                        type: 'binary',\n                        binaryData: frame.binaryPayload\n                    });\n                }\n                else {\n                    // beginning of a fragmented message\n                    this.frameQueue.push(frame);\n                    this.fragmentationSize = frame.length;\n                }\n            }\n            break;\n        case 0x01: // WebSocketFrame.TEXT_FRAME\n            this._debug('-- Text Frame');\n            if (this.assembleFragments) {\n                if (frame.fin) {\n                    if (!isValidUTF8(frame.binaryPayload)) {\n                        this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA,\n                          'Invalid UTF-8 Data Received');\n                        return;\n                    }\n                    // Complete single-frame message received\n                    this._debug('---- Emitting \\'message\\' event');\n                    this.emit('message', {\n                        type: 'utf8',\n                        utf8Data: frame.binaryPayload.toString('utf8')\n                    });\n                }\n                else {\n                    // beginning of a fragmented message\n                    this.frameQueue.push(frame);\n                    this.fragmentationSize = frame.length;\n                }\n            }\n            break;\n        case 0x00: // WebSocketFrame.CONTINUATION\n            this._debug('-- Continuation Frame');\n            if (this.assembleFragments) {\n                if (this.frameQueue.length === 0) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR,\n                      'Unexpected Continuation Frame');\n                    return;\n                }\n\n                this.fragmentationSize += frame.length;\n\n                if (this.fragmentationSize > this.maxReceivedMessageSize) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG,\n                      'Maximum message size exceeded.');\n                    return;\n                }\n\n                this.frameQueue.push(frame);\n\n                if (frame.fin) {\n                    // end of fragmented message, so we process the whole\n                    // message now.  We also have to decode the utf-8 data\n                    // for text frames after combining all the fragments.\n                    var bytesCopied = 0;\n                    var binaryPayload = bufferAllocUnsafe(this.fragmentationSize);\n                    var opcode = this.frameQueue[0].opcode;\n                    this.frameQueue.forEach(function (currentFrame) {\n                        currentFrame.binaryPayload.copy(binaryPayload, bytesCopied);\n                        bytesCopied += currentFrame.binaryPayload.length;\n                    });\n                    this.frameQueue = [];\n                    this.fragmentationSize = 0;\n\n                    switch (opcode) {\n                        case 0x02: // WebSocketOpcode.BINARY_FRAME\n                            this.emit('message', {\n                                type: 'binary',\n                                binaryData: binaryPayload\n                            });\n                            break;\n                        case 0x01: // WebSocketOpcode.TEXT_FRAME\n                            if (!isValidUTF8(binaryPayload)) {\n                                this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA,\n                                  'Invalid UTF-8 Data Received');\n                                return;\n                            }\n                            this.emit('message', {\n                                type: 'utf8',\n                                utf8Data: binaryPayload.toString('utf8')\n                            });\n                            break;\n                        default:\n                            this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR,\n                              'Unexpected first opcode in fragmentation sequence: 0x' + opcode.toString(16));\n                            return;\n                    }\n                }\n            }\n            break;\n        case 0x09: // WebSocketFrame.PING\n            this._debug('-- Ping Frame');\n\n            if (this._pingListenerCount > 0) {\n                // logic to emit the ping frame: this is only done when a listener is known to exist\n                // Expose a function allowing the user to override the default ping() behavior\n                var cancelled = false;\n                var cancel = function() { \n                  cancelled = true; \n                };\n                this.emit('ping', cancel, frame.binaryPayload);\n\n                // Only send a pong if the client did not indicate that he would like to cancel\n                if (!cancelled) {\n                    this.pong(frame.binaryPayload);\n                }\n            }\n            else {\n                this.pong(frame.binaryPayload);\n            }\n\n            break;\n        case 0x0A: // WebSocketFrame.PONG\n            this._debug('-- Pong Frame');\n            this.emit('pong', frame.binaryPayload);\n            break;\n        case 0x08: // WebSocketFrame.CONNECTION_CLOSE\n            this._debug('-- Close Frame');\n            if (this.waitingForCloseResponse) {\n                // Got response to our request to close the connection.\n                // Close is complete, so we just hang up.\n                this._debug('---- Got close response from peer.  Completing closing handshake.');\n                this.clearCloseTimer();\n                this.waitingForCloseResponse = false;\n                this.state = STATE_CLOSED;\n                this.socket.end();\n                return;\n            }\n            \n            this._debug('---- Closing handshake initiated by peer.');\n            // Got request from other party to close connection.\n            // Send back acknowledgement and then hang up.\n            this.state = STATE_PEER_REQUESTED_CLOSE;\n            var respondCloseReasonCode;\n\n            // Make sure the close reason provided is legal according to\n            // the protocol spec.  Providing no close status is legal.\n            // WebSocketFrame sets closeStatus to -1 by default, so if it\n            // is still -1, then no status was provided.\n            if (frame.invalidCloseFrameLength) {\n                this.closeReasonCode = 1005; // 1005 = No reason provided.\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n            }\n            else if (frame.closeStatus === -1 || validateCloseReason(frame.closeStatus)) {\n                this.closeReasonCode = frame.closeStatus;\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n            }\n            else {\n                this.closeReasonCode = frame.closeStatus;\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n            }\n            \n            // If there is a textual description in the close frame, extract it.\n            if (frame.binaryPayload.length > 1) {\n                if (!isValidUTF8(frame.binaryPayload)) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA,\n                      'Invalid UTF-8 Data Received');\n                    return;\n                }\n                this.closeDescription = frame.binaryPayload.toString('utf8');\n            }\n            else {\n                this.closeDescription = WebSocketConnection.CLOSE_DESCRIPTIONS[this.closeReasonCode];\n            }\n            this._debug(\n                '------ Remote peer %s - code: %d - %s - close frame payload length: %d',\n                this.remoteAddress, this.closeReasonCode,\n                this.closeDescription, frame.length\n            );\n            this._debug('------ responding to remote peer\\'s close request.');\n            this.sendCloseFrame(respondCloseReasonCode, null);\n            this.connected = false;\n            break;\n        default:\n            this._debug('-- Unrecognized Opcode %d', frame.opcode);\n            this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR,\n              'Unrecognized Opcode: 0x' + frame.opcode.toString(16));\n            break;\n    }\n};\n\nWebSocketConnection.prototype.send = function(data, cb) {\n    this._debug('send');\n    if (Buffer.isBuffer(data)) {\n        this.sendBytes(data, cb);\n    }\n    else if (typeof(data['toString']) === 'function') {\n        this.sendUTF(data, cb);\n    }\n    else {\n        throw new Error('Data provided must either be a Node Buffer or implement toString()');\n    }\n};\n\nWebSocketConnection.prototype.sendUTF = function(data, cb) {\n    data = bufferFromString(data.toString(), 'utf8');\n    this._debug('sendUTF: %d bytes', data.length);\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x01; // WebSocketOpcode.TEXT_FRAME\n    frame.binaryPayload = data;\n    this.fragmentAndSend(frame, cb);\n};\n\nWebSocketConnection.prototype.sendBytes = function(data, cb) {\n    this._debug('sendBytes');\n    if (!Buffer.isBuffer(data)) {\n        throw new Error('You must pass a Node Buffer object to WebSocketConnection.prototype.sendBytes()');\n    }\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x02; // WebSocketOpcode.BINARY_FRAME\n    frame.binaryPayload = data;\n    this.fragmentAndSend(frame, cb);\n};\n\nWebSocketConnection.prototype.ping = function(data) {\n    this._debug('ping');\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x09; // WebSocketOpcode.PING\n    frame.fin = true;\n    if (data) {\n        if (!Buffer.isBuffer(data)) {\n            data = bufferFromString(data.toString(), 'utf8');\n        }\n        if (data.length > 125) {\n            this._debug('WebSocket: Data for ping is longer than 125 bytes.  Truncating.');\n            data = data.slice(0,124);\n        }\n        frame.binaryPayload = data;\n    }\n    this.sendFrame(frame);\n};\n\n// Pong frames have to echo back the contents of the data portion of the\n// ping frame exactly, byte for byte.\nWebSocketConnection.prototype.pong = function(binaryPayload) {\n    this._debug('pong');\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x0A; // WebSocketOpcode.PONG\n    if (Buffer.isBuffer(binaryPayload) && binaryPayload.length > 125) {\n        this._debug('WebSocket: Data for pong is longer than 125 bytes.  Truncating.');\n        binaryPayload = binaryPayload.slice(0,124);\n    }\n    frame.binaryPayload = binaryPayload;\n    frame.fin = true;\n    this.sendFrame(frame);\n};\n\nWebSocketConnection.prototype.fragmentAndSend = function(frame, cb) {\n    this._debug('fragmentAndSend');\n    if (frame.opcode > 0x07) {\n        throw new Error('You cannot fragment control frames.');\n    }\n\n    var threshold = this.config.fragmentationThreshold;\n    var length = frame.binaryPayload.length;\n\n    // Send immediately if fragmentation is disabled or the message is not\n    // larger than the fragmentation threshold.\n    if (!this.config.fragmentOutgoingMessages || (frame.binaryPayload && length <= threshold)) {\n        frame.fin = true;\n        this.sendFrame(frame, cb);\n        return;\n    }\n    \n    var numFragments = Math.ceil(length / threshold);\n    var sentFragments = 0;\n    var sentCallback = function fragmentSentCallback(err) {\n        if (err) {\n            if (typeof cb === 'function') {\n                // pass only the first error\n                cb(err);\n                cb = null;\n            }\n            return;\n        }\n        ++sentFragments;\n        if ((sentFragments === numFragments) && (typeof cb === 'function')) {\n            cb();\n        }\n    };\n    for (var i=1; i <= numFragments; i++) {\n        var currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n        \n        // continuation opcode except for first frame.\n        currentFrame.opcode = (i === 1) ? frame.opcode : 0x00;\n        \n        // fin set on last frame only\n        currentFrame.fin = (i === numFragments);\n        \n        // length is likely to be shorter on the last fragment\n        var currentLength = (i === numFragments) ? length - (threshold * (i-1)) : threshold;\n        var sliceStart = threshold * (i-1);\n        \n        // Slice the right portion of the original payload\n        currentFrame.binaryPayload = frame.binaryPayload.slice(sliceStart, sliceStart + currentLength);\n        \n        this.sendFrame(currentFrame, sentCallback);\n    }\n};\n\nWebSocketConnection.prototype.sendCloseFrame = function(reasonCode, description, cb) {\n    if (typeof(reasonCode) !== 'number') {\n        reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n    }\n    \n    this._debug('sendCloseFrame state: %s, reasonCode: %d, description: %s', this.state, reasonCode, description);\n    \n    if (this.state !== STATE_OPEN && this.state !== STATE_PEER_REQUESTED_CLOSE) { return; }\n    \n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.fin = true;\n    frame.opcode = 0x08; // WebSocketOpcode.CONNECTION_CLOSE\n    frame.closeStatus = reasonCode;\n    if (typeof(description) === 'string') {\n        frame.binaryPayload = bufferFromString(description, 'utf8');\n    }\n    \n    this.sendFrame(frame, cb);\n    this.socket.end();\n};\n\nWebSocketConnection.prototype.sendFrame = function(frame, cb) {\n    this._debug('sendFrame');\n    frame.mask = this.maskOutgoingPackets;\n    var flushed = this.socket.write(frame.toBuffer(), cb);\n    this.outputBufferFull = !flushed;\n    return flushed;\n};\n\nmodule.exports = WebSocketConnection;\n\n\n\nfunction instrumentSocketForDebugging(connection, socket) {\n    /* jshint loopfunc: true */\n    if (!connection._debug.enabled) { return; }\n    \n    var originalSocketEmit = socket.emit;\n    socket.emit = function(event) {\n        connection._debug('||| Socket Event  \\'%s\\'', event);\n        originalSocketEmit.apply(this, arguments);\n    };\n    \n    for (var key in socket) {\n        if ('function' !== typeof(socket[key])) { continue; }\n        if (['emit'].indexOf(key) !== -1) { continue; }\n        (function(key) {\n            var original = socket[key];\n            if (key === 'on') {\n                socket[key] = function proxyMethod__EventEmitter__On() {\n                    connection._debug('||| Socket method called:  %s (%s)', key, arguments[0]);\n                    return original.apply(this, arguments);\n                };\n                return;\n            }\n            socket[key] = function proxyMethod() {\n                connection._debug('||| Socket method called:  %s', key);\n                return original.apply(this, arguments);\n            };\n        })(key);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC9B,IAAIE,YAAY,GAAGF,OAAO,CAAC,QAAQ,CAAC,CAACE,YAAY;AACjD,IAAIC,cAAc,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAII,UAAU,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;AACpD,IAAIK,WAAW,GAAGL,OAAO,CAAC,gBAAgB,CAAC;AAC3C,IAAIM,iBAAiB,GAAGL,KAAK,CAACK,iBAAiB;AAC/C,IAAIC,gBAAgB,GAAGN,KAAK,CAACM,gBAAgB;;AAE7C;AACA,MAAMC,UAAU,GAAG,MAAM;AACzB;AACA,MAAMC,0BAA0B,GAAG,sBAAsB;AACzD;AACA,MAAMC,YAAY,GAAG,QAAQ;AAC7B;AACA,MAAMC,YAAY,GAAG,QAAQ;AAE7B,IAAIC,gBAAgB,GAAI,cAAc,IAAIC,MAAM,GACpBA,MAAM,CAACC,YAAY,CAACC,IAAI,CAACF,MAAM,CAAC,GAChCG,OAAO,CAACC,QAAQ,CAACF,IAAI,CAACC,OAAO,CAAC;AAE1D,IAAIE,SAAS,GAAG,CAAC;AAEjB,SAASC,mBAAmBA,CAACC,MAAM,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,mBAAmB,EAAEC,MAAM,EAAE;EACpF,IAAI,CAACC,MAAM,GAAGxB,KAAK,CAACyB,eAAe,CAAC,sBAAsB,EAAE,EAAER,SAAS,CAAC;EACxE,IAAI,CAACO,MAAM,CAAC,aAAa,CAAC;EAE1B,IAAI,IAAI,CAACA,MAAM,CAACE,OAAO,EAAE;IACrBC,4BAA4B,CAAC,IAAI,EAAER,MAAM,CAAC;EAC9C;;EAEA;EACAlB,YAAY,CAAC2B,IAAI,CAAC,IAAI,CAAC;EAEvB,IAAI,CAACC,kBAAkB,GAAG,CAAC;EAC3B,IAAI,CAACC,EAAE,CAAC,aAAa,EAAE,UAASC,EAAE,EAAE;IAChC,IAAIA,EAAE,KAAK,MAAM,EAAC;MACd,IAAI,CAACF,kBAAkB,EAAE;IAC7B;EACF,CAAC,CAAC,CAACC,EAAE,CAAC,gBAAgB,EAAE,UAASC,EAAE,EAAE;IACnC,IAAIA,EAAE,KAAK,MAAM,EAAE;MACf,IAAI,CAACF,kBAAkB,EAAE;IAC7B;EACJ,CAAC,CAAC;EAEF,IAAI,CAACN,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACJ,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACE,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACD,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAACY,aAAa,GAAGb,MAAM,CAACa,aAAa;EACzC,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;EACzB,IAAI,CAACC,gBAAgB,GAAG,IAAI;EAC5B,IAAI,CAACC,iBAAiB,GAAG,KAAK;;EAE9B;EACA,IAAI,CAACb,mBAAmB,GAAGA,mBAAmB;;EAE9C;EACA;EACA;EACA,IAAI,CAACc,SAAS,GAAG/B,iBAAiB,CAAC,CAAC,CAAC;EACrC,IAAI,CAACgC,WAAW,GAAGhC,iBAAiB,CAAC,EAAE,CAAC;;EAExC;EACA,IAAI,CAACiC,UAAU,GAAG,IAAInC,UAAU,CAAC,CAAC;;EAElC;EACA,IAAI,CAACoC,YAAY,GAAG,IAAIrC,cAAc,CAAC,IAAI,CAACkC,SAAS,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACd,MAAM,CAAC;EACrF,IAAI,CAACiB,iBAAiB,GAAG,CAAC,CAAC,CAAC;EAC5B,IAAI,CAACC,UAAU,GAAG,EAAE;;EAEpB;EACA,IAAI,CAACC,SAAS,GAAG,IAAI;EACrB,IAAI,CAACC,KAAK,GAAGpC,UAAU;EACvB,IAAI,CAACqC,uBAAuB,GAAG,KAAK;EACpC;EACA,IAAI,CAACC,WAAW,GAAG,KAAK;EAExB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACvB,MAAM,CAACuB,YAAY;EAC5C,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACxB,MAAM,CAACwB,iBAAiB;EACtD,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACzB,MAAM,CAACyB,sBAAsB;EAEhE,IAAI,CAACC,gBAAgB,GAAG,KAAK;EAC7B,IAAI,CAACC,WAAW,GAAG,KAAK;EACxB,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACC,mBAAmB,CAACtC,IAAI,CAAC,IAAI,CAAC;EAC9D,IAAI,CAACuC,kBAAkB,GAAG,IAAI,CAACC,gBAAgB,CAACxC,IAAI,CAAC,IAAI,CAAC;;EAE1D;EACA,IAAI,CAACK,MAAM,CAACoC,UAAU,CAAC,IAAI,CAAChC,MAAM,CAACiC,qBAAqB,CAAC;;EAEzD;EACA,IAAI,CAACrC,MAAM,CAACsC,UAAU,CAAC,CAAC,CAAC;EAEzB,IAAI,IAAI,CAAClC,MAAM,CAACmC,SAAS,IAAI,CAAC,IAAI,CAACnC,MAAM,CAACoC,kBAAkB,EAAE;IAC1D,IAAI,OAAO,IAAI,CAACpC,MAAM,CAACqC,iBAAkB,KAAK,QAAQ,EAAE;MACpD,MAAM,IAAIC,KAAK,CAAC,kDAAkD,GAClD,uBAAuB,CAAC;IAC5C;IACA,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACC,oBAAoB,CAACjD,IAAI,CAAC,IAAI,CAAC;IAClE,IAAI,CAACkD,iBAAiB,CAAC,CAAC;IAExB,IAAI,IAAI,CAACzC,MAAM,CAAC0C,gCAAgC,EAAE;MAC9C,IAAI,OAAO,IAAI,CAAC1C,MAAM,CAAC2C,oBAAqB,KAAK,QAAQ,EAAE;QACvD,MAAM,IAAIL,KAAK,CAAC,8CAA8C,GAC9C,8CAA8C,GAC9C,UAAU,CAAC;MAC/B;MACA,IAAI,CAACM,wBAAwB,GAAG,IAAI,CAACC,sBAAsB,CAACtD,IAAI,CAAC,IAAI,CAAC;IAC1E;EACJ,CAAC,MACI,IAAI,IAAI,CAACS,MAAM,CAACmC,SAAS,IAAI,IAAI,CAACnC,MAAM,CAACoC,kBAAkB,EAAE;IAC9D,IAAI,EAAE,cAAc,IAAI,IAAI,CAACxC,MAAM,CAAC,EAAE;MAClC,MAAM,IAAI0C,KAAK,CAAC,iDAAiD,GACjD,uBAAuB,CAAC;IAC5C;IACA,IAAI,CAAC1C,MAAM,CAACkD,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC9C,MAAM,CAACqC,iBAAiB,CAAC;EACjE;;EAEA;EACA;EACA;EACA;EACA,IAAI,CAACzC,MAAM,CAACmD,kBAAkB,CAAC,OAAO,CAAC;AAC3C;AAEApD,mBAAmB,CAACqD,mBAAmB,GAAG,IAAI;AAC9CrD,mBAAmB,CAACsD,uBAAuB,GAAG,IAAI;AAClDtD,mBAAmB,CAACuD,2BAA2B,GAAG,IAAI;AACtDvD,mBAAmB,CAACwD,gCAAgC,GAAG,IAAI;AAC3DxD,mBAAmB,CAACyD,qBAAqB,GAAG,IAAI,CAAC,CAAC;AAClDzD,mBAAmB,CAAC0D,yBAAyB,GAAG,IAAI,CAAC,CAAC;AACtD1D,mBAAmB,CAAC2D,qBAAqB,GAAG,IAAI,CAAC,CAAC;AAClD3D,mBAAmB,CAAC4D,yBAAyB,GAAG,IAAI;AACpD5D,mBAAmB,CAAC6D,6BAA6B,GAAG,IAAI;AACxD7D,mBAAmB,CAAC8D,4BAA4B,GAAG,IAAI;AACvD9D,mBAAmB,CAAC+D,+BAA+B,GAAG,IAAI;AAC1D/D,mBAAmB,CAACgE,kCAAkC,GAAG,IAAI;AAC7DhE,mBAAmB,CAACiE,iCAAiC,GAAG,IAAI,CAAC,CAAC;;AAE9DjE,mBAAmB,CAACkE,kBAAkB,GAAG;EACrC,IAAI,EAAE,2BAA2B;EACjC,IAAI,EAAE,2BAA2B;EACjC,IAAI,EAAE,gBAAgB;EACtB,IAAI,EAAE,qBAAqB;EAC3B,IAAI,EAAE,UAAU;EAChB,IAAI,EAAE,qBAAqB;EAC3B,IAAI,EAAE,+CAA+C;EACrD,IAAI,EAAE,uBAAuB;EAC7B,IAAI,EAAE,kBAAkB;EACxB,IAAI,EAAE,iBAAiB;EACvB,IAAI,EAAE,2CAA2C;EACjD,IAAI,EAAE,uBAAuB;EAC7B,IAAI,EAAE;AACV,CAAC;AAED,SAASC,mBAAmBA,CAACC,IAAI,EAAE;EAC/B,IAAIA,IAAI,GAAG,IAAI,EAAE;IACb;IACA,OAAO,KAAK;EAChB;EACA,IAAIA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI,EAAE;IAC9B;IACA;IACA,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAACC,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC;EAC9G;EACA,IAAIA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI,EAAE;IAC9B;IACA;IACA;IACA,OAAO,IAAI;EACf;EACA,IAAIA,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI,EAAE;IAC9B;IACA;IACA,OAAO,IAAI;EACf;EACA,IAAIA,IAAI,IAAI,IAAI,EAAE;IACd,OAAO,KAAK;EAChB;AACJ;AAEAxF,IAAI,CAAC0F,QAAQ,CAACtE,mBAAmB,EAAEjB,YAAY,CAAC;AAEhDiB,mBAAmB,CAACuE,SAAS,CAACC,wBAAwB,GAAG,YAAW;EAChE,IAAI,CAACvE,MAAM,CAACW,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC6D,iBAAiB,CAAC7E,IAAI,CAAC,IAAI,CAAC,CAAC;EAC1D,IAAI,CAACK,MAAM,CAACW,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC8D,eAAe,CAAC9E,IAAI,CAAC,IAAI,CAAC,CAAC;EACtD,IAAI,CAACK,MAAM,CAACW,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC+D,iBAAiB,CAAC/E,IAAI,CAAC,IAAI,CAAC,CAAC;EAC1D,IAAI,CAACK,MAAM,CAACW,EAAE,CAAC,OAAO,EAAE,IAAI,CAACgE,iBAAiB,CAAChF,IAAI,CAAC,IAAI,CAAC,CAAC;EAC1D,IAAI,CAACK,MAAM,CAACW,EAAE,CAAC,OAAO,EAAE,IAAI,CAACiE,iBAAiB,CAACjF,IAAI,CAAC,IAAI,CAAC,CAAC;EAC1D,IAAI,CAACK,MAAM,CAACW,EAAE,CAAC,QAAQ,EAAE,IAAI,CAACkE,kBAAkB,CAAClF,IAAI,CAAC,IAAI,CAAC,CAAC;EAC5D,IAAI,CAACK,MAAM,CAACW,EAAE,CAAC,MAAM,EAAE,IAAI,CAACmE,gBAAgB,CAACnF,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5D,CAAC;;AAED;AACAI,mBAAmB,CAACuE,SAAS,CAACzB,iBAAiB,GAAG,YAAW;EACzD,IAAI,CAACxC,MAAM,CAAC,mBAAmB,CAAC;EAChC,IAAI,CAAC,IAAI,CAACD,MAAM,CAACmC,SAAS,IAAK,IAAI,CAACnC,MAAM,CAACoC,kBAAkB,EAAE;IAAE;EAAQ;EACzE,IAAI,CAACuC,mBAAmB,CAAC,CAAC;EAC1B,IAAI,CAACC,qBAAqB,CAAC,CAAC;EAC5B,IAAI,CAACC,mBAAmB,GAAG3C,UAAU,CAAC,IAAI,CAACK,sBAAsB,EAAE,IAAI,CAACvC,MAAM,CAACqC,iBAAiB,CAAC;AACrG,CAAC;AAED1C,mBAAmB,CAACuE,SAAS,CAACS,mBAAmB,GAAG,YAAW;EAC3D,IAAI,IAAI,CAACE,mBAAmB,EAAE;IAC1BC,YAAY,CAAC,IAAI,CAACD,mBAAmB,CAAC;EAC1C;AACJ,CAAC;;AAED;AACAlF,mBAAmB,CAACuE,SAAS,CAAC1B,oBAAoB,GAAG,YAAW;EAC5D,IAAI,CAACvC,MAAM,CAAC,sBAAsB,CAAC;EACnC,IAAI,CAAC4E,mBAAmB,GAAG,IAAI;EAC/B,IAAI,CAACE,IAAI,CAAC,CAAC;;EAEX;EACA;EACA,IAAI,IAAI,CAAC/E,MAAM,CAAC0C,gCAAgC,EAAE;IAC9C,IAAI,CAACsC,mBAAmB,CAAC,CAAC;EAC9B,CAAC,MACI;IACD;IACA,IAAI,CAACvC,iBAAiB,CAAC,CAAC;EAC5B;AACJ,CAAC;AAED9C,mBAAmB,CAACuE,SAAS,CAACc,mBAAmB,GAAG,YAAW;EAC3D,IAAI,CAAC/E,MAAM,CAAC,qBAAqB,CAAC;EAClC,IAAI,CAAC2E,qBAAqB,CAAC,CAAC;EAC5B,IAAI,CAACK,qBAAqB,GAAG/C,UAAU,CAAC,IAAI,CAACU,wBAAwB,EAAE,IAAI,CAAC5C,MAAM,CAAC2C,oBAAoB,CAAC;AAC5G,CAAC;AAEDhD,mBAAmB,CAACuE,SAAS,CAACU,qBAAqB,GAAG,YAAW;EAC7D,IAAI,IAAI,CAACK,qBAAqB,EAAE;IAC5BH,YAAY,CAAC,IAAI,CAACG,qBAAqB,CAAC;EAC5C;AACJ,CAAC;AAEDtF,mBAAmB,CAACuE,SAAS,CAACrB,sBAAsB,GAAG,YAAW;EAC9D,IAAI,CAAC5C,MAAM,CAAC,wBAAwB,CAAC;EACrC;EACA,IAAI,CAACgF,qBAAqB,GAAG,IAAI;EACjC,IAAI,CAACC,IAAI,CAACvF,mBAAmB,CAAC2D,qBAAqB,EAAE,sBAAsB,EAAE,IAAI,CAAC;AACtF,CAAC;AAED3D,mBAAmB,CAACuE,SAAS,CAACQ,gBAAgB,GAAG,UAASS,IAAI,EAAE;EAC5D,IAAI,CAAClF,MAAM,CAAC,kBAAkB,CAAC;EAC/B;EACA,IAAI,CAACwC,iBAAiB,CAAC,CAAC;;EAExB;EACA;EACA,IAAI,CAAC1B,UAAU,CAACqE,KAAK,CAACD,IAAI,CAAC;EAE3B,IAAI,CAACtD,mBAAmB,CAAC,CAAC;AAC9B,CAAC;AAEDlC,mBAAmB,CAACuE,SAAS,CAACrC,mBAAmB,GAAG,YAAW;EAC3D,IAAI,CAAC5B,MAAM,CAAC,qBAAqB,CAAC;EAClC;EACA,IAAI,CAAC,IAAI,CAACkB,SAAS,EAAE;IAAE;EAAQ;;EAE/B;EACA,IAAI,IAAI,CAACQ,WAAW,EAAE;IAAE;EAAQ;EAEhC,IAAI0D,KAAK,GAAG,IAAI,CAACrE,YAAY;;EAE7B;EACA;EACA;EACA,IAAI,CAACqE,KAAK,CAACC,OAAO,CAAC,IAAI,CAACvE,UAAU,CAAC,EAAE;IAAE,IAAI,CAACd,MAAM,CAAC,gCAAgC,CAAC;IAAE;EAAQ;EAE9F,IAAIsF,IAAI,GAAG,IAAI;;EAEf;EACA,IAAIF,KAAK,CAACG,aAAa,EAAE;IACrB;IACA,IAAI,CAACvF,MAAM,CAAC,mBAAmB,CAAC;IAChCT,OAAO,CAACC,QAAQ,CAAC,YAAW;MACxB8F,IAAI,CAACL,IAAI,CAACvF,mBAAmB,CAACuD,2BAA2B,EAAEmC,KAAK,CAACI,UAAU,CAAC;IAChF,CAAC,CAAC;IACF;EACJ,CAAC,MACI,IAAIJ,KAAK,CAACK,aAAa,EAAE;IAC1B,IAAI,CAACzF,MAAM,CAAC,oBAAoB,CAAC;IACjCT,OAAO,CAACC,QAAQ,CAAC,YAAW;MACxB8F,IAAI,CAACL,IAAI,CAACvF,mBAAmB,CAAC8D,4BAA4B,EAAE4B,KAAK,CAACI,UAAU,CAAC;IACjF,CAAC,CAAC;IACF;EACJ;;EAEA;EACA,IAAIJ,KAAK,CAACM,IAAI,IAAIN,KAAK,CAACO,IAAI,IAAIP,KAAK,CAACQ,IAAI,EAAE;IACxC,IAAI,CAAC5F,MAAM,CAAC,qBAAqB,CAAC;IAClCT,OAAO,CAACC,QAAQ,CAAC,YAAW;MACxB8F,IAAI,CAACL,IAAI,CAACvF,mBAAmB,CAACuD,2BAA2B,EACvD,6DAA6D,CAAC;IACpE,CAAC,CAAC;IACF;EACJ;EAEA,IAAI,CAAC,IAAI,CAAC1B,iBAAiB,EAAE;IACzB,IAAI,CAACvB,MAAM,CAAC,mBAAmB,CAAC;IAChCT,OAAO,CAACC,QAAQ,CAAC,YAAW;MAAE8F,IAAI,CAACO,IAAI,CAAC,OAAO,EAAET,KAAK,CAAC;IAAE,CAAC,CAAC;EAC/D;EAEA7F,OAAO,CAACC,QAAQ,CAAC,YAAW;IAAE8F,IAAI,CAACQ,YAAY,CAACV,KAAK,CAAC;EAAE,CAAC,CAAC;EAE1D,IAAI,CAACrE,YAAY,GAAG,IAAIrC,cAAc,CAAC,IAAI,CAACkC,SAAS,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACd,MAAM,CAAC;;EAErF;EACA;EACA;EACA;EACA,IAAI,IAAI,CAACe,UAAU,CAACiF,MAAM,GAAG,CAAC,EAAE;IAC5B5G,gBAAgB,CAAC,IAAI,CAACwC,mBAAmB,CAAC;EAC9C;AACJ,CAAC;AAEDjC,mBAAmB,CAACuE,SAAS,CAACE,iBAAiB,GAAG,UAAS6B,KAAK,EAAE;EAC9D,IAAI,CAAChG,MAAM,CAAC,uBAAuB,EAAEgG,KAAK,CAAC;EAC3C,IAAI,IAAI,CAAC7E,KAAK,KAAKjC,YAAY,EAAE;IACnC;IACM,IAAI,CAACc,MAAM,CAAC,wCAAwC,CAAC;IACrD;EACJ;EACA,IAAI,CAACS,eAAe,GAAGf,mBAAmB,CAAC2D,qBAAqB;EAChE,IAAI,CAAC3C,gBAAgB,GAAG,gBAAgB,GAAGsF,KAAK,CAACC,OAAO,GAAG,GAAG,GAAGD,KAAK,CAAClC,IAAI;EAC3E,IAAI,CAAC5C,SAAS,GAAG,KAAK;EACtB,IAAI,CAACC,KAAK,GAAGjC,YAAY;EACzB,IAAI,CAAC8B,iBAAiB,GAAG,CAAC;EAC1B,IAAIxC,KAAK,CAAC0H,yBAAyB,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE;IACpD,IAAI,CAACL,IAAI,CAAC,OAAO,EAAEG,KAAK,CAAC;EAC7B;EACA,IAAI,CAACrG,MAAM,CAACwG,OAAO,CAAC,CAAC;EACrB,IAAI,CAACnG,MAAM,CAACoG,WAAW,CAAC,CAAC;AAC7B,CAAC;AAED1G,mBAAmB,CAACuE,SAAS,CAACG,eAAe,GAAG,YAAW;EACvD,IAAI,CAACpE,MAAM,CAAC,mDAAmD,EAAE,IAAI,CAACmB,KAAK,CAAC;EAC5E,IAAI,CAACE,WAAW,GAAG,IAAI;EACvB,IAAI,IAAI,CAACF,KAAK,KAAKjC,YAAY,EAAE;IAC7B;IACA;IACA;IACA,IAAI,CAACc,MAAM,CAAC,sCAAsC,CAAC;IACnD;EACJ;EACA,IAAI,IAAI,CAACmB,KAAK,KAAKnC,0BAA0B,IACzC,IAAI,CAACmC,KAAK,KAAKlC,YAAY,EAAE;IAC/B,IAAI,CAACe,MAAM,CAAC,8BAA8B,CAAC;IAC3C,IAAI,CAACL,MAAM,CAAC0G,GAAG,CAAC,CAAC;EACnB;AACJ,CAAC;AAED3G,mBAAmB,CAACuE,SAAS,CAACI,iBAAiB,GAAG,UAASiC,QAAQ,EAAE;EACjE,IAAI,CAACtG,MAAM,CAAC,0CAA0C,CAAC;EACvD,IAAI,CAACuG,cAAc,GAAGD,QAAQ;EAC9B,IAAI,CAACpF,SAAS,GAAG,KAAK;EACtB,IAAI,CAACC,KAAK,GAAGjC,YAAY;EACzB;EACA;EACA,IAAI,IAAI,CAACuB,eAAe,KAAK,CAAC,CAAC,EAAE;IAC7B,IAAI,CAACA,eAAe,GAAGf,mBAAmB,CAAC2D,qBAAqB;IAChE,IAAI,CAAC3C,gBAAgB,GAAG,oCAAoC;EAChE;EACA,IAAI,CAAC8F,eAAe,CAAC,CAAC;EACtB,IAAI,CAAC9B,mBAAmB,CAAC,CAAC;EAC1B,IAAI,CAACC,qBAAqB,CAAC,CAAC;EAC5B,IAAI,CAAC,IAAI,CAAChE,iBAAiB,EAAE;IACzB,IAAI,CAACA,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACX,MAAM,CAAC,6CAA6C,CAAC;IAC1D,IAAI,CAAC6F,IAAI,CAAC,OAAO,EAAE,IAAI,CAACpF,eAAe,EAAE,IAAI,CAACC,gBAAgB,CAAC;EACnE;AACJ,CAAC;AAEDhB,mBAAmB,CAACuE,SAAS,CAACK,iBAAiB,GAAG,YAAW;EACzD,IAAI,CAACtE,MAAM,CAAC,uCAAuC,CAAC;EACpD,IAAI,CAACyB,gBAAgB,GAAG,KAAK;EAC7B,IAAI,CAACoE,IAAI,CAAC,OAAO,CAAC;AACtB,CAAC;AAEDnG,mBAAmB,CAACuE,SAAS,CAACM,iBAAiB,GAAG,YAAW;EACzD,IAAI,CAACvE,MAAM,CAAC,uCAAuC,CAAC;EACpD,IAAI,CAAC0B,WAAW,GAAG,IAAI;EACvB,IAAI,CAACmE,IAAI,CAAC,OAAO,CAAC;AACtB,CAAC;AAEDnG,mBAAmB,CAACuE,SAAS,CAACO,kBAAkB,GAAG,YAAW;EAC1D,IAAI,CAACxE,MAAM,CAAC,yCAAyC,CAAC;EACtD,IAAI,CAAC0B,WAAW,GAAG,KAAK;EACxB,IAAI,CAACmE,IAAI,CAAC,QAAQ,CAAC;EACnB,IAAI,CAACjE,mBAAmB,CAAC,CAAC;AAC9B,CAAC;AAEDlC,mBAAmB,CAACuE,SAAS,CAACwC,KAAK,GAAG,YAAW;EAC7C,IAAI,CAACzG,MAAM,CAAC,wBAAwB,CAAC;EACrC,IAAI,CAACL,MAAM,CAAC8G,KAAK,CAAC,CAAC;AACvB,CAAC;AAED/G,mBAAmB,CAACuE,SAAS,CAACyC,MAAM,GAAG,YAAW;EAC9C,IAAI,CAAC1G,MAAM,CAAC,0BAA0B,CAAC;EACvC,IAAI,CAACL,MAAM,CAAC+G,MAAM,CAAC,CAAC;AACxB,CAAC;AAEDhH,mBAAmB,CAACuE,SAAS,CAAC0C,KAAK,GAAG,UAASC,UAAU,EAAEC,WAAW,EAAE;EACpE,IAAI,IAAI,CAAC3F,SAAS,EAAE;IAChB,IAAI,CAAClB,MAAM,CAAC,kDAAkD,CAAC;IAC/D,IAAI,QAAQ,KAAK,OAAO4G,UAAU,EAAE;MAChCA,UAAU,GAAGlH,mBAAmB,CAACqD,mBAAmB;IACxD;IACA,IAAI,CAACc,mBAAmB,CAAC+C,UAAU,CAAC,EAAE;MAClC,MAAM,IAAIvE,KAAK,CAAC,aAAa,GAAGuE,UAAU,GAAG,gBAAgB,CAAC;IAClE;IACA,IAAI,QAAQ,KAAK,OAAOC,WAAW,EAAE;MACjCA,WAAW,GAAGnH,mBAAmB,CAACkE,kBAAkB,CAACgD,UAAU,CAAC;IACpE;IACA,IAAI,CAACnG,eAAe,GAAGmG,UAAU;IACjC,IAAI,CAAClG,gBAAgB,GAAGmG,WAAW;IACnC,IAAI,CAACC,aAAa,CAAC,CAAC;IACpB,IAAI,CAACC,cAAc,CAAC,IAAI,CAACtG,eAAe,EAAE,IAAI,CAACC,gBAAgB,CAAC;IAChE,IAAI,CAACS,KAAK,GAAGlC,YAAY;IACzB,IAAI,CAACiC,SAAS,GAAG,KAAK;EAC1B;AACJ,CAAC;AAEDxB,mBAAmB,CAACuE,SAAS,CAACgB,IAAI,GAAG,UAAS2B,UAAU,EAAEC,WAAW,EAAEG,cAAc,EAAE;EACnF,IAAI,CAAChH,MAAM,CAAC,MAAM,CAAC;EACnB,IAAI,OAAO4G,UAAW,KAAK,QAAQ,EAAE;IACjCA,UAAU,GAAGlH,mBAAmB,CAACuD,2BAA2B;EAChE;EAEA,IAAI,OAAO4D,WAAY,KAAK,QAAQ,EAAE;IAClC;IACA;IACAA,WAAW,GAAGnH,mBAAmB,CAACkE,kBAAkB,CAACgD,UAAU,CAAC;EACpE;EAEA,IAAI,CAAC5G,MAAM,CAAC,+EAA+E,EACvFgH,cAAc,EAAEJ,UAAU,EAAEC,WAChC,CAAC;EAED,IAAI,CAACpG,eAAe,GAAGmG,UAAU;EACjC,IAAI,CAAClG,gBAAgB,GAAGmG,WAAW;EACnC,IAAI,CAAC5F,UAAU,GAAG,EAAE;EACpB,IAAI,CAACD,iBAAiB,GAAG,CAAC;EAC1B,IAAI,CAACgG,cAAc,EAAE;IACjB,IAAI,CAACD,cAAc,CAACH,UAAU,EAAEC,WAAW,CAAC;EAChD;EACA,IAAI,CAAC3F,SAAS,GAAG,KAAK;EACtB,IAAI,CAACC,KAAK,GAAGjC,YAAY;EACzB,IAAI,CAACsH,eAAe,CAAC,CAAC;EACtB,IAAI,CAAC9B,mBAAmB,CAAC,CAAC;EAC1B,IAAI,CAACC,qBAAqB,CAAC,CAAC;EAE5B,IAAI,CAAC,IAAI,CAAChE,iBAAiB,EAAE;IACzB,IAAI,CAACA,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACX,MAAM,CAAC,0CAA0C,CAAC;IACvD,IAAI,CAAC6F,IAAI,CAAC,OAAO,EAAE,IAAI,CAACpF,eAAe,EAAE,IAAI,CAACC,gBAAgB,CAAC;EACnE;EAEA,IAAI,CAACV,MAAM,CAAC,yBAAyB,CAAC;EACtC,IAAI,CAACL,MAAM,CAACwG,OAAO,CAAC,CAAC;AACzB,CAAC;AAEDzG,mBAAmB,CAACuE,SAAS,CAAC6C,aAAa,GAAG,YAAW;EACrD,IAAI,CAAC9G,MAAM,CAAC,eAAe,CAAC;EAC5B,IAAI,CAACwG,eAAe,CAAC,CAAC;EACtB,IAAI,CAACxG,MAAM,CAAC,qBAAqB,CAAC;EAClC,IAAI,CAACoB,uBAAuB,GAAG,IAAI;EACnC,IAAI,CAAC6F,UAAU,GAAGhF,UAAU,CAAC,IAAI,CAACJ,kBAAkB,EAAE,IAAI,CAACP,YAAY,CAAC;AAC5E,CAAC;AAED5B,mBAAmB,CAACuE,SAAS,CAACuC,eAAe,GAAG,YAAW;EACvD,IAAI,CAACxG,MAAM,CAAC,iBAAiB,CAAC;EAC9B,IAAI,IAAI,CAACiH,UAAU,EAAE;IACjB,IAAI,CAACjH,MAAM,CAAC,sBAAsB,CAAC;IACnC6E,YAAY,CAAC,IAAI,CAACoC,UAAU,CAAC;IAC7B,IAAI,CAAC7F,uBAAuB,GAAG,KAAK;IACpC,IAAI,CAAC6F,UAAU,GAAG,IAAI;EAC1B;AACJ,CAAC;AAEDvH,mBAAmB,CAACuE,SAAS,CAACnC,gBAAgB,GAAG,YAAW;EACxD,IAAI,CAAC9B,MAAM,CAAC,kBAAkB,CAAC;EAC/B,IAAI,CAACiH,UAAU,GAAG,IAAI;EACtB,IAAI,IAAI,CAAC7F,uBAAuB,EAAE;IAC9B,IAAI,CAACpB,MAAM,CAAC,+DAA+D,CAAC;IAC5E,IAAI,CAACoB,uBAAuB,GAAG,KAAK;IACpC,IAAI,CAACD,KAAK,GAAGjC,YAAY;IACzB,IAAI,CAACS,MAAM,CAAC0G,GAAG,CAAC,CAAC;EACrB;AACJ,CAAC;AAED3G,mBAAmB,CAACuE,SAAS,CAAC6B,YAAY,GAAG,UAASV,KAAK,EAAE;EACzD,IAAI,CAACpF,MAAM,CAAC,cAAc,CAAC;EAC3B,IAAI,CAACA,MAAM,CAAC,eAAe,EAAEoF,KAAK,CAAC;;EAEnC;EACA;EACA,IAAI,IAAI,CAACnE,UAAU,CAAC8E,MAAM,KAAK,CAAC,IAAKX,KAAK,CAAC8B,MAAM,GAAG,IAAI,IAAI9B,KAAK,CAAC8B,MAAM,GAAG,IAAK,EAAE;IAC9E,IAAI,CAACjC,IAAI,CAACvF,mBAAmB,CAACuD,2BAA2B,EACvD,yBAAyB,GAAGmC,KAAK,CAAC8B,MAAM,CAACC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAC3D,2CAA2C,CAAC;IAC9C;EACJ;EAEA,QAAO/B,KAAK,CAAC8B,MAAM;IACf,KAAK,IAAI;MAAE;MACP,IAAI,CAAClH,MAAM,CAAC,iBAAiB,CAAC;MAC9B,IAAI,IAAI,CAACuB,iBAAiB,EAAE;QACxB,IAAI6D,KAAK,CAACgC,GAAG,EAAE;UACX;UACA,IAAI,CAACpH,MAAM,CAAC,iCAAiC,CAAC;UAC9C,IAAI,CAAC6F,IAAI,CAAC,SAAS,EAAE;YACjBwB,IAAI,EAAE,QAAQ;YACdC,UAAU,EAAElC,KAAK,CAACmC;UACtB,CAAC,CAAC;QACN,CAAC,MACI;UACD;UACA,IAAI,CAACtG,UAAU,CAACuG,IAAI,CAACpC,KAAK,CAAC;UAC3B,IAAI,CAACpE,iBAAiB,GAAGoE,KAAK,CAACW,MAAM;QACzC;MACJ;MACA;IACJ,KAAK,IAAI;MAAE;MACP,IAAI,CAAC/F,MAAM,CAAC,eAAe,CAAC;MAC5B,IAAI,IAAI,CAACuB,iBAAiB,EAAE;QACxB,IAAI6D,KAAK,CAACgC,GAAG,EAAE;UACX,IAAI,CAACxI,WAAW,CAACwG,KAAK,CAACmC,aAAa,CAAC,EAAE;YACnC,IAAI,CAACtC,IAAI,CAACvF,mBAAmB,CAAC4D,yBAAyB,EACrD,6BAA6B,CAAC;YAChC;UACJ;UACA;UACA,IAAI,CAACtD,MAAM,CAAC,iCAAiC,CAAC;UAC9C,IAAI,CAAC6F,IAAI,CAAC,SAAS,EAAE;YACjBwB,IAAI,EAAE,MAAM;YACZI,QAAQ,EAAErC,KAAK,CAACmC,aAAa,CAACJ,QAAQ,CAAC,MAAM;UACjD,CAAC,CAAC;QACN,CAAC,MACI;UACD;UACA,IAAI,CAAClG,UAAU,CAACuG,IAAI,CAACpC,KAAK,CAAC;UAC3B,IAAI,CAACpE,iBAAiB,GAAGoE,KAAK,CAACW,MAAM;QACzC;MACJ;MACA;IACJ,KAAK,IAAI;MAAE;MACP,IAAI,CAAC/F,MAAM,CAAC,uBAAuB,CAAC;MACpC,IAAI,IAAI,CAACuB,iBAAiB,EAAE;QACxB,IAAI,IAAI,CAACN,UAAU,CAAC8E,MAAM,KAAK,CAAC,EAAE;UAC9B,IAAI,CAACd,IAAI,CAACvF,mBAAmB,CAACuD,2BAA2B,EACvD,+BAA+B,CAAC;UAClC;QACJ;QAEA,IAAI,CAACjC,iBAAiB,IAAIoE,KAAK,CAACW,MAAM;QAEtC,IAAI,IAAI,CAAC/E,iBAAiB,GAAG,IAAI,CAACQ,sBAAsB,EAAE;UACtD,IAAI,CAACyD,IAAI,CAACvF,mBAAmB,CAAC8D,4BAA4B,EACxD,gCAAgC,CAAC;UACnC;QACJ;QAEA,IAAI,CAACvC,UAAU,CAACuG,IAAI,CAACpC,KAAK,CAAC;QAE3B,IAAIA,KAAK,CAACgC,GAAG,EAAE;UACX;UACA;UACA;UACA,IAAIM,WAAW,GAAG,CAAC;UACnB,IAAIH,aAAa,GAAG1I,iBAAiB,CAAC,IAAI,CAACmC,iBAAiB,CAAC;UAC7D,IAAIkG,MAAM,GAAG,IAAI,CAACjG,UAAU,CAAC,CAAC,CAAC,CAACiG,MAAM;UACtC,IAAI,CAACjG,UAAU,CAAC0G,OAAO,CAAC,UAAU5G,YAAY,EAAE;YAC5CA,YAAY,CAACwG,aAAa,CAACK,IAAI,CAACL,aAAa,EAAEG,WAAW,CAAC;YAC3DA,WAAW,IAAI3G,YAAY,CAACwG,aAAa,CAACxB,MAAM;UACpD,CAAC,CAAC;UACF,IAAI,CAAC9E,UAAU,GAAG,EAAE;UACpB,IAAI,CAACD,iBAAiB,GAAG,CAAC;UAE1B,QAAQkG,MAAM;YACV,KAAK,IAAI;cAAE;cACP,IAAI,CAACrB,IAAI,CAAC,SAAS,EAAE;gBACjBwB,IAAI,EAAE,QAAQ;gBACdC,UAAU,EAAEC;cAChB,CAAC,CAAC;cACF;YACJ,KAAK,IAAI;cAAE;cACP,IAAI,CAAC3I,WAAW,CAAC2I,aAAa,CAAC,EAAE;gBAC7B,IAAI,CAACtC,IAAI,CAACvF,mBAAmB,CAAC4D,yBAAyB,EACrD,6BAA6B,CAAC;gBAChC;cACJ;cACA,IAAI,CAACuC,IAAI,CAAC,SAAS,EAAE;gBACjBwB,IAAI,EAAE,MAAM;gBACZI,QAAQ,EAAEF,aAAa,CAACJ,QAAQ,CAAC,MAAM;cAC3C,CAAC,CAAC;cACF;YACJ;cACI,IAAI,CAAClC,IAAI,CAACvF,mBAAmB,CAACuD,2BAA2B,EACvD,uDAAuD,GAAGiE,MAAM,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC;cAChF;UACR;QACJ;MACJ;MACA;IACJ,KAAK,IAAI;MAAE;MACP,IAAI,CAACnH,MAAM,CAAC,eAAe,CAAC;MAE5B,IAAI,IAAI,CAACK,kBAAkB,GAAG,CAAC,EAAE;QAC7B;QACA;QACA,IAAIwH,SAAS,GAAG,KAAK;QACrB,IAAIC,MAAM,GAAG,SAAAA,CAAA,EAAW;UACtBD,SAAS,GAAG,IAAI;QAClB,CAAC;QACD,IAAI,CAAChC,IAAI,CAAC,MAAM,EAAEiC,MAAM,EAAE1C,KAAK,CAACmC,aAAa,CAAC;;QAE9C;QACA,IAAI,CAACM,SAAS,EAAE;UACZ,IAAI,CAACE,IAAI,CAAC3C,KAAK,CAACmC,aAAa,CAAC;QAClC;MACJ,CAAC,MACI;QACD,IAAI,CAACQ,IAAI,CAAC3C,KAAK,CAACmC,aAAa,CAAC;MAClC;MAEA;IACJ,KAAK,IAAI;MAAE;MACP,IAAI,CAACvH,MAAM,CAAC,eAAe,CAAC;MAC5B,IAAI,CAAC6F,IAAI,CAAC,MAAM,EAAET,KAAK,CAACmC,aAAa,CAAC;MACtC;IACJ,KAAK,IAAI;MAAE;MACP,IAAI,CAACvH,MAAM,CAAC,gBAAgB,CAAC;MAC7B,IAAI,IAAI,CAACoB,uBAAuB,EAAE;QAC9B;QACA;QACA,IAAI,CAACpB,MAAM,CAAC,mEAAmE,CAAC;QAChF,IAAI,CAACwG,eAAe,CAAC,CAAC;QACtB,IAAI,CAACpF,uBAAuB,GAAG,KAAK;QACpC,IAAI,CAACD,KAAK,GAAGjC,YAAY;QACzB,IAAI,CAACS,MAAM,CAAC0G,GAAG,CAAC,CAAC;QACjB;MACJ;MAEA,IAAI,CAACrG,MAAM,CAAC,2CAA2C,CAAC;MACxD;MACA;MACA,IAAI,CAACmB,KAAK,GAAGnC,0BAA0B;MACvC,IAAIgJ,sBAAsB;;MAE1B;MACA;MACA;MACA;MACA,IAAI5C,KAAK,CAAC6C,uBAAuB,EAAE;QAC/B,IAAI,CAACxH,eAAe,GAAG,IAAI,CAAC,CAAC;QAC7BuH,sBAAsB,GAAGtI,mBAAmB,CAACuD,2BAA2B;MAC5E,CAAC,MACI,IAAImC,KAAK,CAAC8C,WAAW,KAAK,CAAC,CAAC,IAAIrE,mBAAmB,CAACuB,KAAK,CAAC8C,WAAW,CAAC,EAAE;QACzE,IAAI,CAACzH,eAAe,GAAG2E,KAAK,CAAC8C,WAAW;QACxCF,sBAAsB,GAAGtI,mBAAmB,CAACqD,mBAAmB;MACpE,CAAC,MACI;QACD,IAAI,CAACtC,eAAe,GAAG2E,KAAK,CAAC8C,WAAW;QACxCF,sBAAsB,GAAGtI,mBAAmB,CAACuD,2BAA2B;MAC5E;;MAEA;MACA,IAAImC,KAAK,CAACmC,aAAa,CAACxB,MAAM,GAAG,CAAC,EAAE;QAChC,IAAI,CAACnH,WAAW,CAACwG,KAAK,CAACmC,aAAa,CAAC,EAAE;UACnC,IAAI,CAACtC,IAAI,CAACvF,mBAAmB,CAAC4D,yBAAyB,EACrD,6BAA6B,CAAC;UAChC;QACJ;QACA,IAAI,CAAC5C,gBAAgB,GAAG0E,KAAK,CAACmC,aAAa,CAACJ,QAAQ,CAAC,MAAM,CAAC;MAChE,CAAC,MACI;QACD,IAAI,CAACzG,gBAAgB,GAAGhB,mBAAmB,CAACkE,kBAAkB,CAAC,IAAI,CAACnD,eAAe,CAAC;MACxF;MACA,IAAI,CAACT,MAAM,CACP,wEAAwE,EACxE,IAAI,CAACQ,aAAa,EAAE,IAAI,CAACC,eAAe,EACxC,IAAI,CAACC,gBAAgB,EAAE0E,KAAK,CAACW,MACjC,CAAC;MACD,IAAI,CAAC/F,MAAM,CAAC,oDAAoD,CAAC;MACjE,IAAI,CAAC+G,cAAc,CAACiB,sBAAsB,EAAE,IAAI,CAAC;MACjD,IAAI,CAAC9G,SAAS,GAAG,KAAK;MACtB;IACJ;MACI,IAAI,CAAClB,MAAM,CAAC,2BAA2B,EAAEoF,KAAK,CAAC8B,MAAM,CAAC;MACtD,IAAI,CAACjC,IAAI,CAACvF,mBAAmB,CAACuD,2BAA2B,EACvD,yBAAyB,GAAGmC,KAAK,CAAC8B,MAAM,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC;MACxD;EACR;AACJ,CAAC;AAEDzH,mBAAmB,CAACuE,SAAS,CAACkE,IAAI,GAAG,UAASjD,IAAI,EAAEkD,EAAE,EAAE;EACpD,IAAI,CAACpI,MAAM,CAAC,MAAM,CAAC;EACnB,IAAIqI,MAAM,CAACC,QAAQ,CAACpD,IAAI,CAAC,EAAE;IACvB,IAAI,CAACqD,SAAS,CAACrD,IAAI,EAAEkD,EAAE,CAAC;EAC5B,CAAC,MACI,IAAI,OAAOlD,IAAI,CAAC,UAAU,CAAE,KAAK,UAAU,EAAE;IAC9C,IAAI,CAACsD,OAAO,CAACtD,IAAI,EAAEkD,EAAE,CAAC;EAC1B,CAAC,MACI;IACD,MAAM,IAAI/F,KAAK,CAAC,oEAAoE,CAAC;EACzF;AACJ,CAAC;AAED3C,mBAAmB,CAACuE,SAAS,CAACuE,OAAO,GAAG,UAAStD,IAAI,EAAEkD,EAAE,EAAE;EACvDlD,IAAI,GAAGpG,gBAAgB,CAACoG,IAAI,CAACiC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC;EAChD,IAAI,CAACnH,MAAM,CAAC,mBAAmB,EAAEkF,IAAI,CAACa,MAAM,CAAC;EAC7C,IAAIX,KAAK,GAAG,IAAI1G,cAAc,CAAC,IAAI,CAACkC,SAAS,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACd,MAAM,CAAC;EAC7EqF,KAAK,CAAC8B,MAAM,GAAG,IAAI,CAAC,CAAC;EACrB9B,KAAK,CAACmC,aAAa,GAAGrC,IAAI;EAC1B,IAAI,CAACuD,eAAe,CAACrD,KAAK,EAAEgD,EAAE,CAAC;AACnC,CAAC;AAED1I,mBAAmB,CAACuE,SAAS,CAACsE,SAAS,GAAG,UAASrD,IAAI,EAAEkD,EAAE,EAAE;EACzD,IAAI,CAACpI,MAAM,CAAC,WAAW,CAAC;EACxB,IAAI,CAACqI,MAAM,CAACC,QAAQ,CAACpD,IAAI,CAAC,EAAE;IACxB,MAAM,IAAI7C,KAAK,CAAC,iFAAiF,CAAC;EACtG;EACA,IAAI+C,KAAK,GAAG,IAAI1G,cAAc,CAAC,IAAI,CAACkC,SAAS,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACd,MAAM,CAAC;EAC7EqF,KAAK,CAAC8B,MAAM,GAAG,IAAI,CAAC,CAAC;EACrB9B,KAAK,CAACmC,aAAa,GAAGrC,IAAI;EAC1B,IAAI,CAACuD,eAAe,CAACrD,KAAK,EAAEgD,EAAE,CAAC;AACnC,CAAC;AAED1I,mBAAmB,CAACuE,SAAS,CAACa,IAAI,GAAG,UAASI,IAAI,EAAE;EAChD,IAAI,CAAClF,MAAM,CAAC,MAAM,CAAC;EACnB,IAAIoF,KAAK,GAAG,IAAI1G,cAAc,CAAC,IAAI,CAACkC,SAAS,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACd,MAAM,CAAC;EAC7EqF,KAAK,CAAC8B,MAAM,GAAG,IAAI,CAAC,CAAC;EACrB9B,KAAK,CAACgC,GAAG,GAAG,IAAI;EAChB,IAAIlC,IAAI,EAAE;IACN,IAAI,CAACmD,MAAM,CAACC,QAAQ,CAACpD,IAAI,CAAC,EAAE;MACxBA,IAAI,GAAGpG,gBAAgB,CAACoG,IAAI,CAACiC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC;IACpD;IACA,IAAIjC,IAAI,CAACa,MAAM,GAAG,GAAG,EAAE;MACnB,IAAI,CAAC/F,MAAM,CAAC,iEAAiE,CAAC;MAC9EkF,IAAI,GAAGA,IAAI,CAACwD,KAAK,CAAC,CAAC,EAAC,GAAG,CAAC;IAC5B;IACAtD,KAAK,CAACmC,aAAa,GAAGrC,IAAI;EAC9B;EACA,IAAI,CAACyD,SAAS,CAACvD,KAAK,CAAC;AACzB,CAAC;;AAED;AACA;AACA1F,mBAAmB,CAACuE,SAAS,CAAC8D,IAAI,GAAG,UAASR,aAAa,EAAE;EACzD,IAAI,CAACvH,MAAM,CAAC,MAAM,CAAC;EACnB,IAAIoF,KAAK,GAAG,IAAI1G,cAAc,CAAC,IAAI,CAACkC,SAAS,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACd,MAAM,CAAC;EAC7EqF,KAAK,CAAC8B,MAAM,GAAG,IAAI,CAAC,CAAC;EACrB,IAAImB,MAAM,CAACC,QAAQ,CAACf,aAAa,CAAC,IAAIA,aAAa,CAACxB,MAAM,GAAG,GAAG,EAAE;IAC9D,IAAI,CAAC/F,MAAM,CAAC,iEAAiE,CAAC;IAC9EuH,aAAa,GAAGA,aAAa,CAACmB,KAAK,CAAC,CAAC,EAAC,GAAG,CAAC;EAC9C;EACAtD,KAAK,CAACmC,aAAa,GAAGA,aAAa;EACnCnC,KAAK,CAACgC,GAAG,GAAG,IAAI;EAChB,IAAI,CAACuB,SAAS,CAACvD,KAAK,CAAC;AACzB,CAAC;AAED1F,mBAAmB,CAACuE,SAAS,CAACwE,eAAe,GAAG,UAASrD,KAAK,EAAEgD,EAAE,EAAE;EAChE,IAAI,CAACpI,MAAM,CAAC,iBAAiB,CAAC;EAC9B,IAAIoF,KAAK,CAAC8B,MAAM,GAAG,IAAI,EAAE;IACrB,MAAM,IAAI7E,KAAK,CAAC,qCAAqC,CAAC;EAC1D;EAEA,IAAIuG,SAAS,GAAG,IAAI,CAAC7I,MAAM,CAAC8I,sBAAsB;EAClD,IAAI9C,MAAM,GAAGX,KAAK,CAACmC,aAAa,CAACxB,MAAM;;EAEvC;EACA;EACA,IAAI,CAAC,IAAI,CAAChG,MAAM,CAAC+I,wBAAwB,IAAK1D,KAAK,CAACmC,aAAa,IAAIxB,MAAM,IAAI6C,SAAU,EAAE;IACvFxD,KAAK,CAACgC,GAAG,GAAG,IAAI;IAChB,IAAI,CAACuB,SAAS,CAACvD,KAAK,EAAEgD,EAAE,CAAC;IACzB;EACJ;EAEA,IAAIW,YAAY,GAAGC,IAAI,CAACC,IAAI,CAAClD,MAAM,GAAG6C,SAAS,CAAC;EAChD,IAAIM,aAAa,GAAG,CAAC;EACrB,IAAIC,YAAY,GAAG,SAASC,oBAAoBA,CAACC,GAAG,EAAE;IAClD,IAAIA,GAAG,EAAE;MACL,IAAI,OAAOjB,EAAE,KAAK,UAAU,EAAE;QAC1B;QACAA,EAAE,CAACiB,GAAG,CAAC;QACPjB,EAAE,GAAG,IAAI;MACb;MACA;IACJ;IACA,EAAEc,aAAa;IACf,IAAKA,aAAa,KAAKH,YAAY,IAAM,OAAOX,EAAE,KAAK,UAAW,EAAE;MAChEA,EAAE,CAAC,CAAC;IACR;EACJ,CAAC;EACD,KAAK,IAAIkB,CAAC,GAAC,CAAC,EAAEA,CAAC,IAAIP,YAAY,EAAEO,CAAC,EAAE,EAAE;IAClC,IAAIvI,YAAY,GAAG,IAAIrC,cAAc,CAAC,IAAI,CAACkC,SAAS,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACd,MAAM,CAAC;;IAEpF;IACAgB,YAAY,CAACmG,MAAM,GAAIoC,CAAC,KAAK,CAAC,GAAIlE,KAAK,CAAC8B,MAAM,GAAG,IAAI;;IAErD;IACAnG,YAAY,CAACqG,GAAG,GAAIkC,CAAC,KAAKP,YAAa;;IAEvC;IACA,IAAIQ,aAAa,GAAID,CAAC,KAAKP,YAAY,GAAIhD,MAAM,GAAI6C,SAAS,IAAIU,CAAC,GAAC,CAAC,CAAE,GAAGV,SAAS;IACnF,IAAIY,UAAU,GAAGZ,SAAS,IAAIU,CAAC,GAAC,CAAC,CAAC;;IAElC;IACAvI,YAAY,CAACwG,aAAa,GAAGnC,KAAK,CAACmC,aAAa,CAACmB,KAAK,CAACc,UAAU,EAAEA,UAAU,GAAGD,aAAa,CAAC;IAE9F,IAAI,CAACZ,SAAS,CAAC5H,YAAY,EAAEoI,YAAY,CAAC;EAC9C;AACJ,CAAC;AAEDzJ,mBAAmB,CAACuE,SAAS,CAAC8C,cAAc,GAAG,UAASH,UAAU,EAAEC,WAAW,EAAEuB,EAAE,EAAE;EACjF,IAAI,OAAOxB,UAAW,KAAK,QAAQ,EAAE;IACjCA,UAAU,GAAGlH,mBAAmB,CAACqD,mBAAmB;EACxD;EAEA,IAAI,CAAC/C,MAAM,CAAC,2DAA2D,EAAE,IAAI,CAACmB,KAAK,EAAEyF,UAAU,EAAEC,WAAW,CAAC;EAE7G,IAAI,IAAI,CAAC1F,KAAK,KAAKpC,UAAU,IAAI,IAAI,CAACoC,KAAK,KAAKnC,0BAA0B,EAAE;IAAE;EAAQ;EAEtF,IAAIoG,KAAK,GAAG,IAAI1G,cAAc,CAAC,IAAI,CAACkC,SAAS,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACd,MAAM,CAAC;EAC7EqF,KAAK,CAACgC,GAAG,GAAG,IAAI;EAChBhC,KAAK,CAAC8B,MAAM,GAAG,IAAI,CAAC,CAAC;EACrB9B,KAAK,CAAC8C,WAAW,GAAGtB,UAAU;EAC9B,IAAI,OAAOC,WAAY,KAAK,QAAQ,EAAE;IAClCzB,KAAK,CAACmC,aAAa,GAAGzI,gBAAgB,CAAC+H,WAAW,EAAE,MAAM,CAAC;EAC/D;EAEA,IAAI,CAAC8B,SAAS,CAACvD,KAAK,EAAEgD,EAAE,CAAC;EACzB,IAAI,CAACzI,MAAM,CAAC0G,GAAG,CAAC,CAAC;AACrB,CAAC;AAED3G,mBAAmB,CAACuE,SAAS,CAAC0E,SAAS,GAAG,UAASvD,KAAK,EAAEgD,EAAE,EAAE;EAC1D,IAAI,CAACpI,MAAM,CAAC,WAAW,CAAC;EACxBoF,KAAK,CAACqE,IAAI,GAAG,IAAI,CAAC3J,mBAAmB;EACrC,IAAI4J,OAAO,GAAG,IAAI,CAAC/J,MAAM,CAACwF,KAAK,CAACC,KAAK,CAACuE,QAAQ,CAAC,CAAC,EAAEvB,EAAE,CAAC;EACrD,IAAI,CAAC3G,gBAAgB,GAAG,CAACiI,OAAO;EAChC,OAAOA,OAAO;AAClB,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGnK,mBAAmB;AAIpC,SAASS,4BAA4BA,CAAC2J,UAAU,EAAEnK,MAAM,EAAE;EACtD;EACA,IAAI,CAACmK,UAAU,CAAC9J,MAAM,CAACE,OAAO,EAAE;IAAE;EAAQ;EAE1C,IAAI6J,kBAAkB,GAAGpK,MAAM,CAACkG,IAAI;EACpClG,MAAM,CAACkG,IAAI,GAAG,UAASmE,KAAK,EAAE;IAC1BF,UAAU,CAAC9J,MAAM,CAAC,0BAA0B,EAAEgK,KAAK,CAAC;IACpDD,kBAAkB,CAACE,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAC7C,CAAC;EAED,KAAK,IAAIC,GAAG,IAAIxK,MAAM,EAAE;IACpB,IAAI,UAAU,KAAK,OAAOA,MAAM,CAACwK,GAAG,CAAE,EAAE;MAAE;IAAU;IACpD,IAAI,CAAC,MAAM,CAAC,CAACpG,OAAO,CAACoG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAAE;IAAU;IAC9C,CAAC,UAASA,GAAG,EAAE;MACX,IAAIC,QAAQ,GAAGzK,MAAM,CAACwK,GAAG,CAAC;MAC1B,IAAIA,GAAG,KAAK,IAAI,EAAE;QACdxK,MAAM,CAACwK,GAAG,CAAC,GAAG,SAASE,6BAA6BA,CAAA,EAAG;UACnDP,UAAU,CAAC9J,MAAM,CAAC,oCAAoC,EAAEmK,GAAG,EAAED,SAAS,CAAC,CAAC,CAAC,CAAC;UAC1E,OAAOE,QAAQ,CAACH,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QAC1C,CAAC;QACD;MACJ;MACAvK,MAAM,CAACwK,GAAG,CAAC,GAAG,SAASG,WAAWA,CAAA,EAAG;QACjCR,UAAU,CAAC9J,MAAM,CAAC,+BAA+B,EAAEmK,GAAG,CAAC;QACvD,OAAOC,QAAQ,CAACH,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;MAC1C,CAAC;IACL,CAAC,EAAEC,GAAG,CAAC;EACX;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}